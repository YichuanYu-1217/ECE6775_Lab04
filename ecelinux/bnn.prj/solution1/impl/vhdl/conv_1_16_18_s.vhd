-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity conv_1_16_18_s is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    input_0_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    input_0_ce0 : OUT STD_LOGIC;
    input_0_q0 : IN STD_LOGIC_VECTOR (0 downto 0);
    output_r_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    output_r_ce0 : OUT STD_LOGIC;
    output_r_we0 : OUT STD_LOGIC;
    output_r_d0 : OUT STD_LOGIC_VECTOR (0 downto 0) );
end;


architecture behav of conv_1_16_18_s is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (8 downto 0) := "000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (8 downto 0) := "000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (8 downto 0) := "000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (8 downto 0) := "000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (8 downto 0) := "000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (8 downto 0) := "001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (8 downto 0) := "010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (8 downto 0) := "100000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv5_10 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv16_1 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";
    constant ap_const_lv16_FFF7 : STD_LOGIC_VECTOR (15 downto 0) := "1111111111110111";
    constant ap_const_lv9_2 : STD_LOGIC_VECTOR (8 downto 0) := "000000010";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal threshold_conv1_V_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal threshold_conv1_V_ce0 : STD_LOGIC;
    signal threshold_conv1_V_q0 : STD_LOGIC_VECTOR (3 downto 0);
    signal w_conv1_0_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal w_conv1_0_ce0 : STD_LOGIC;
    signal w_conv1_0_q0 : STD_LOGIC_VECTOR (0 downto 0);
    signal n_fu_190_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal n_reg_462 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal icmp_ln61_fu_184_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln68_fu_223_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal sext_ln68_reg_472 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal zext_ln895_fu_235_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln895_reg_477 : STD_LOGIC_VECTOR (9 downto 0);
    signal sext_ln62_fu_239_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln62_reg_482 : STD_LOGIC_VECTOR (15 downto 0);
    signal x_fu_249_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal x_reg_490 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal zext_ln63_fu_255_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal zext_ln63_reg_495 : STD_LOGIC_VECTOR (13 downto 0);
    signal icmp_ln62_fu_243_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal y_fu_265_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal y_reg_503 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal c_fu_281_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal c_reg_511 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal zext_ln68_14_fu_293_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln68_14_reg_516 : STD_LOGIC_VECTOR (9 downto 0);
    signal icmp_ln65_fu_275_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln66_2_fu_297_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln66_2_reg_521 : STD_LOGIC_VECTOR (8 downto 0);
    signal r_fu_356_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal r_reg_529 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal icmp_ln66_fu_350_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln68_12_fu_429_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln68_12_reg_539 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal input_0_load_reg_549 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln700_fu_453_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal n_0_reg_102 : STD_LOGIC_VECTOR (4 downto 0);
    signal x_0_reg_114 : STD_LOGIC_VECTOR (4 downto 0);
    signal icmp_ln63_fu_259_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal y_0_reg_126 : STD_LOGIC_VECTOR (4 downto 0);
    signal p_014_0_reg_138 : STD_LOGIC_VECTOR (15 downto 0);
    signal c_0_reg_150 : STD_LOGIC_VECTOR (1 downto 0);
    signal p_014_1_reg_161 : STD_LOGIC_VECTOR (15 downto 0);
    signal r_0_reg_173 : STD_LOGIC_VECTOR (1 downto 0);
    signal zext_ln68_fu_196_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln73_3_fu_341_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln68_17_fu_403_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln68_19_fu_434_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_fu_205_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln68_13_fu_213_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln68_12_fu_201_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal sub_ln68_fu_217_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_s_fu_227_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln65_fu_271_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln68_fu_287_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal shl_ln1503_fu_301_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal accum_V_fu_307_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln73_fu_319_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln73_fu_323_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_36_cast_fu_328_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln73_2_fu_336_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal zext_ln66_fu_346_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln68_2_fu_362_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_3_fu_368_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_4_fu_380_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln68_15_fu_376_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln68_16_fu_388_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln68_9_fu_392_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln68_10_fu_398_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln68_18_fu_408_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln68_11_fu_412_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal shl_ln68_fu_417_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal sub_ln68_2_fu_423_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal xor_ln68_fu_438_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln68_2_fu_444_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln700_fu_449_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (8 downto 0);

    component conv_1_16_18_s_thbkb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (3 downto 0) );
    end component;


    component conv_1_16_18_s_w_cud IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin
    threshold_conv1_V_U : component conv_1_16_18_s_thbkb
    generic map (
        DataWidth => 4,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => threshold_conv1_V_address0,
        ce0 => threshold_conv1_V_ce0,
        q0 => threshold_conv1_V_q0);

    w_conv1_0_U : component conv_1_16_18_s_w_cud
    generic map (
        DataWidth => 1,
        AddressRange => 144,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => w_conv1_0_address0,
        ce0 => w_conv1_0_ce0,
        q0 => w_conv1_0_q0);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    c_0_reg_150_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln63_fu_259_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                c_0_reg_150 <= ap_const_lv2_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state7) and (icmp_ln66_fu_350_p2 = ap_const_lv1_1))) then 
                c_0_reg_150 <= c_reg_511;
            end if; 
        end if;
    end process;

    n_0_reg_102_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln62_fu_243_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                n_0_reg_102 <= n_reg_462;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                n_0_reg_102 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    p_014_0_reg_138_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln63_fu_259_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                p_014_0_reg_138 <= ap_const_lv16_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state7) and (icmp_ln66_fu_350_p2 = ap_const_lv1_1))) then 
                p_014_0_reg_138 <= p_014_1_reg_161;
            end if; 
        end if;
    end process;

    p_014_1_reg_161_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln65_fu_275_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                p_014_1_reg_161 <= p_014_0_reg_138;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                p_014_1_reg_161 <= add_ln700_fu_453_p2;
            end if; 
        end if;
    end process;

    r_0_reg_173_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln65_fu_275_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                r_0_reg_173 <= ap_const_lv2_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                r_0_reg_173 <= r_reg_529;
            end if; 
        end if;
    end process;

    x_0_reg_114_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln63_fu_259_p2 = ap_const_lv1_1))) then 
                x_0_reg_114 <= x_reg_490;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                x_0_reg_114 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    y_0_reg_126_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln62_fu_243_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                y_0_reg_126 <= ap_const_lv5_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln65_fu_275_p2 = ap_const_lv1_1))) then 
                y_0_reg_126 <= y_reg_503;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln66_fu_350_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state7))) then
                add_ln68_12_reg_539 <= add_ln68_12_fu_429_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                c_reg_511 <= c_fu_281_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                input_0_load_reg_549 <= input_0_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                n_reg_462 <= n_fu_190_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                r_reg_529 <= r_fu_356_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                sext_ln62_reg_482 <= sext_ln62_fu_239_p1;
                sext_ln68_reg_472 <= sext_ln68_fu_223_p1;
                    zext_ln895_reg_477(8 downto 4) <= zext_ln895_fu_235_p1(8 downto 4);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                x_reg_490 <= x_fu_249_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                y_reg_503 <= y_fu_265_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln62_fu_243_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    zext_ln63_reg_495(4 downto 0) <= zext_ln63_fu_255_p1(4 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln65_fu_275_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                    zext_ln66_2_reg_521(1 downto 0) <= zext_ln66_2_fu_297_p1(1 downto 0);
                    zext_ln68_14_reg_516(4 downto 0) <= zext_ln68_14_fu_293_p1(4 downto 0);
            end if;
        end if;
    end process;
    zext_ln895_reg_477(3 downto 0) <= "0000";
    zext_ln895_reg_477(9) <= '0';
    zext_ln63_reg_495(13 downto 5) <= "000000000";
    zext_ln68_14_reg_516(9 downto 5) <= "00000";
    zext_ln66_2_reg_521(8 downto 2) <= "0000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln61_fu_184_p2, ap_CS_fsm_state4, icmp_ln62_fu_243_p2, ap_CS_fsm_state5, ap_CS_fsm_state6, icmp_ln65_fu_275_p2, ap_CS_fsm_state7, icmp_ln66_fu_350_p2, icmp_ln63_fu_259_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln61_fu_184_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                if (((icmp_ln62_fu_243_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln63_fu_259_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state6 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln65_fu_275_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state7 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state7) and (icmp_ln66_fu_350_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXX";
        end case;
    end process;
    accum_V_fu_307_p2 <= std_logic_vector(signed(ap_const_lv16_FFF7) + signed(shl_ln1503_fu_301_p2));
    add_ln68_10_fu_398_p2 <= std_logic_vector(unsigned(zext_ln68_14_reg_516) + unsigned(add_ln68_9_fu_392_p2));
    add_ln68_11_fu_412_p2 <= std_logic_vector(unsigned(zext_ln68_18_fu_408_p1) + unsigned(sext_ln68_reg_472));
    add_ln68_12_fu_429_p2 <= std_logic_vector(unsigned(zext_ln66_2_reg_521) + unsigned(sub_ln68_2_fu_423_p2));
    add_ln68_2_fu_362_p2 <= std_logic_vector(unsigned(y_0_reg_126) + unsigned(zext_ln66_fu_346_p1));
    add_ln68_9_fu_392_p2 <= std_logic_vector(unsigned(zext_ln68_15_fu_376_p1) + unsigned(zext_ln68_16_fu_388_p1));
    add_ln68_fu_287_p2 <= std_logic_vector(unsigned(zext_ln65_fu_271_p1) + unsigned(x_0_reg_114));
    add_ln700_fu_453_p2 <= std_logic_vector(unsigned(zext_ln700_fu_449_p1) + unsigned(p_014_1_reg_161));
    add_ln73_2_fu_336_p2 <= std_logic_vector(unsigned(tmp_36_cast_fu_328_p3) + unsigned(zext_ln63_reg_495));
    add_ln73_fu_323_p2 <= std_logic_vector(unsigned(zext_ln895_reg_477) + unsigned(zext_ln73_fu_319_p1));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln61_fu_184_p2)
    begin
        if ((((icmp_ln61_fu_184_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2)) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, icmp_ln61_fu_184_p2)
    begin
        if (((icmp_ln61_fu_184_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    c_fu_281_p2 <= std_logic_vector(unsigned(c_0_reg_150) + unsigned(ap_const_lv2_1));
    icmp_ln61_fu_184_p2 <= "1" when (n_0_reg_102 = ap_const_lv5_10) else "0";
    icmp_ln62_fu_243_p2 <= "1" when (x_0_reg_114 = ap_const_lv5_10) else "0";
    icmp_ln63_fu_259_p2 <= "1" when (y_0_reg_126 = ap_const_lv5_10) else "0";
    icmp_ln65_fu_275_p2 <= "1" when (c_0_reg_150 = ap_const_lv2_3) else "0";
    icmp_ln66_fu_350_p2 <= "1" when (r_0_reg_173 = ap_const_lv2_3) else "0";
    input_0_address0 <= zext_ln68_17_fu_403_p1(9 - 1 downto 0);

    input_0_ce0_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            input_0_ce0 <= ap_const_logic_1;
        else 
            input_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    n_fu_190_p2 <= std_logic_vector(unsigned(n_0_reg_102) + unsigned(ap_const_lv5_1));
    output_r_address0 <= zext_ln73_3_fu_341_p1(12 - 1 downto 0);

    output_r_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            output_r_ce0 <= ap_const_logic_1;
        else 
            output_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    output_r_d0 <= "1" when (signed(accum_V_fu_307_p2) > signed(sext_ln62_reg_482)) else "0";

    output_r_we0_assign_proc : process(ap_CS_fsm_state6, icmp_ln65_fu_275_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln65_fu_275_p2 = ap_const_lv1_1))) then 
            output_r_we0 <= ap_const_logic_1;
        else 
            output_r_we0 <= ap_const_logic_0;
        end if; 
    end process;

    r_fu_356_p2 <= std_logic_vector(unsigned(r_0_reg_173) + unsigned(ap_const_lv2_1));
        sext_ln62_fu_239_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(threshold_conv1_V_q0),16));

        sext_ln68_fu_223_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln68_fu_217_p2),9));

    shl_ln1503_fu_301_p2 <= std_logic_vector(shift_left(unsigned(p_014_0_reg_138),to_integer(unsigned('0' & ap_const_lv16_1(16-1 downto 0)))));
    shl_ln68_fu_417_p2 <= std_logic_vector(shift_left(unsigned(add_ln68_11_fu_412_p2),to_integer(unsigned('0' & ap_const_lv9_2(9-1 downto 0)))));
    sub_ln68_2_fu_423_p2 <= std_logic_vector(unsigned(shl_ln68_fu_417_p2) - unsigned(add_ln68_11_fu_412_p2));
    sub_ln68_fu_217_p2 <= std_logic_vector(unsigned(zext_ln68_13_fu_213_p1) - unsigned(zext_ln68_12_fu_201_p1));
    threshold_conv1_V_address0 <= zext_ln68_fu_196_p1(4 - 1 downto 0);

    threshold_conv1_V_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            threshold_conv1_V_ce0 <= ap_const_logic_1;
        else 
            threshold_conv1_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    tmp_36_cast_fu_328_p3 <= (add_ln73_fu_323_p2 & ap_const_lv4_0);
    tmp_3_fu_368_p3 <= (add_ln68_2_fu_362_p2 & ap_const_lv4_0);
    tmp_4_fu_380_p3 <= (add_ln68_2_fu_362_p2 & ap_const_lv1_0);
    tmp_fu_205_p3 <= (n_0_reg_102 & ap_const_lv2_0);
    tmp_s_fu_227_p3 <= (n_0_reg_102 & ap_const_lv4_0);
    w_conv1_0_address0 <= zext_ln68_19_fu_434_p1(8 - 1 downto 0);

    w_conv1_0_ce0_assign_proc : process(ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            w_conv1_0_ce0 <= ap_const_logic_1;
        else 
            w_conv1_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    x_fu_249_p2 <= std_logic_vector(unsigned(x_0_reg_114) + unsigned(ap_const_lv5_1));
    xor_ln68_2_fu_444_p2 <= (xor_ln68_fu_438_p2 xor input_0_load_reg_549);
    xor_ln68_fu_438_p2 <= (w_conv1_0_q0 xor ap_const_lv1_1);
    y_fu_265_p2 <= std_logic_vector(unsigned(y_0_reg_126) + unsigned(ap_const_lv5_1));
    zext_ln63_fu_255_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(x_0_reg_114),14));
    zext_ln65_fu_271_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(c_0_reg_150),5));
    zext_ln66_2_fu_297_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(c_0_reg_150),9));
    zext_ln66_fu_346_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(r_0_reg_173),5));
    zext_ln68_12_fu_201_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(n_0_reg_102),8));
    zext_ln68_13_fu_213_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_fu_205_p3),8));
    zext_ln68_14_fu_293_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln68_fu_287_p2),10));
    zext_ln68_15_fu_376_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_3_fu_368_p3),10));
    zext_ln68_16_fu_388_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_4_fu_380_p3),10));
    zext_ln68_17_fu_403_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln68_10_fu_398_p2),64));
    zext_ln68_18_fu_408_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(r_0_reg_173),9));
    zext_ln68_19_fu_434_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln68_12_reg_539),64));
    zext_ln68_fu_196_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(n_0_reg_102),64));
    zext_ln700_fu_449_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(xor_ln68_2_fu_444_p2),16));
    zext_ln73_3_fu_341_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln73_2_fu_336_p2),64));
    zext_ln73_fu_319_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(y_0_reg_126),10));
    zext_ln895_fu_235_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_s_fu_227_p3),10));
end behav;
