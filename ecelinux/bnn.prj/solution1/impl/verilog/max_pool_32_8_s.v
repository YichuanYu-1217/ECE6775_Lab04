// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module max_pool_32_8_s (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        input_r_address0,
        input_r_ce0,
        input_r_q0,
        output_r_address0,
        output_r_ce0,
        output_r_we0,
        output_r_d0
);

parameter    ap_ST_fsm_state1 = 7'd1;
parameter    ap_ST_fsm_state2 = 7'd2;
parameter    ap_ST_fsm_state3 = 7'd4;
parameter    ap_ST_fsm_state4 = 7'd8;
parameter    ap_ST_fsm_state5 = 7'd16;
parameter    ap_ST_fsm_state6 = 7'd32;
parameter    ap_ST_fsm_state7 = 7'd64;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [10:0] input_r_address0;
output   input_r_ce0;
input  [0:0] input_r_q0;
output  [8:0] output_r_address0;
output   output_r_ce0;
output   output_r_we0;
output  [0:0] output_r_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg input_r_ce0;
reg output_r_ce0;
reg output_r_we0;

(* fsm_encoding = "none" *) reg   [6:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [5:0] m_fu_154_p2;
reg   [5:0] m_reg_304;
wire    ap_CS_fsm_state2;
wire   [8:0] zext_ln90_fu_168_p1;
reg   [8:0] zext_ln90_reg_309;
wire   [0:0] icmp_ln89_fu_148_p2;
wire   [2:0] x_fu_178_p2;
reg   [2:0] x_reg_317;
wire    ap_CS_fsm_state3;
wire   [2:0] shl_ln95_fu_184_p2;
reg   [2:0] shl_ln95_reg_322;
wire   [0:0] icmp_ln90_fu_172_p2;
wire   [10:0] zext_ln91_fu_190_p1;
reg   [10:0] zext_ln91_reg_327;
wire   [2:0] y_fu_200_p2;
reg   [2:0] y_reg_335;
wire    ap_CS_fsm_state4;
wire   [2:0] shl_ln95_1_fu_206_p2;
reg   [2:0] shl_ln95_1_reg_340;
wire   [0:0] icmp_ln91_fu_194_p2;
wire   [1:0] c_fu_222_p2;
reg   [1:0] c_reg_348;
wire    ap_CS_fsm_state5;
wire   [2:0] add_ln95_fu_228_p2;
reg   [2:0] add_ln95_reg_353;
wire   [0:0] icmp_ln93_fu_216_p2;
wire   [1:0] r_fu_270_p2;
reg   [1:0] r_reg_361;
wire    ap_CS_fsm_state6;
wire   [0:0] icmp_ln94_fu_264_p2;
wire   [0:0] or_ln95_fu_295_p2;
wire    ap_CS_fsm_state7;
reg   [5:0] m_0_reg_66;
reg   [2:0] x_0_reg_78;
reg   [2:0] y_0_reg_89;
reg   [0:0] max_0_reg_101;
reg   [1:0] c_0_reg_114;
reg   [0:0] max_1_reg_125;
reg   [1:0] r_0_reg_137;
wire   [63:0] zext_ln99_1_fu_255_p1;
wire   [63:0] zext_ln95_fu_290_p1;
wire   [7:0] tmp_fu_160_p3;
wire   [2:0] zext_ln93_fu_212_p1;
wire   [8:0] zext_ln99_fu_233_p1;
wire   [8:0] add_ln99_fu_237_p2;
wire   [10:0] tmp_10_cast_fu_242_p3;
wire   [10:0] add_ln99_1_fu_250_p2;
wire   [2:0] zext_ln94_fu_260_p1;
wire   [2:0] add_ln95_1_fu_276_p2;
wire   [11:0] tmp_s_fu_281_p4;
reg   [6:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 7'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) & (icmp_ln94_fu_264_p2 == 1'd1))) begin
        c_0_reg_114 <= c_reg_348;
    end else if (((icmp_ln91_fu_194_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        c_0_reg_114 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln90_fu_172_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        m_0_reg_66 <= m_reg_304;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        m_0_reg_66 <= 6'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) & (icmp_ln94_fu_264_p2 == 1'd1))) begin
        max_0_reg_101 <= max_1_reg_125;
    end else if (((icmp_ln91_fu_194_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        max_0_reg_101 <= 1'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln93_fu_216_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        max_1_reg_125 <= max_0_reg_101;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        max_1_reg_125 <= or_ln95_fu_295_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln93_fu_216_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        r_0_reg_137 <= 2'd0;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        r_0_reg_137 <= r_reg_361;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln91_fu_194_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        x_0_reg_78 <= x_reg_317;
    end else if (((icmp_ln89_fu_148_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        x_0_reg_78 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln90_fu_172_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        y_0_reg_89 <= 3'd0;
    end else if (((icmp_ln93_fu_216_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
        y_0_reg_89 <= y_reg_335;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln93_fu_216_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        add_ln95_reg_353 <= add_ln95_fu_228_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        c_reg_348 <= c_fu_222_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        m_reg_304 <= m_fu_154_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        r_reg_361 <= r_fu_270_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln91_fu_194_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        shl_ln95_1_reg_340[2 : 1] <= shl_ln95_1_fu_206_p2[2 : 1];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln90_fu_172_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        shl_ln95_reg_322[2 : 1] <= shl_ln95_fu_184_p2[2 : 1];
        zext_ln91_reg_327[2 : 0] <= zext_ln91_fu_190_p1[2 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        x_reg_317 <= x_fu_178_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        y_reg_335 <= y_fu_200_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln89_fu_148_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        zext_ln90_reg_309[7 : 2] <= zext_ln90_fu_168_p1[7 : 2];
    end
end

always @ (*) begin
    if ((((icmp_ln89_fu_148_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2)) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln89_fu_148_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        input_r_ce0 = 1'b1;
    end else begin
        input_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        output_r_ce0 = 1'b1;
    end else begin
        output_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln93_fu_216_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
        output_r_we0 = 1'b1;
    end else begin
        output_r_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln89_fu_148_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((icmp_ln90_fu_172_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((icmp_ln91_fu_194_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((icmp_ln93_fu_216_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state6 : begin
            if (((1'b1 == ap_CS_fsm_state6) & (icmp_ln94_fu_264_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln95_1_fu_276_p2 = (shl_ln95_1_reg_340 + zext_ln94_fu_260_p1);

assign add_ln95_fu_228_p2 = (shl_ln95_reg_322 + zext_ln93_fu_212_p1);

assign add_ln99_1_fu_250_p2 = (zext_ln91_reg_327 + tmp_10_cast_fu_242_p3);

assign add_ln99_fu_237_p2 = (zext_ln99_fu_233_p1 + zext_ln90_reg_309);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign c_fu_222_p2 = (c_0_reg_114 + 2'd1);

assign icmp_ln89_fu_148_p2 = ((m_0_reg_66 == 6'd32) ? 1'b1 : 1'b0);

assign icmp_ln90_fu_172_p2 = ((x_0_reg_78 == 3'd4) ? 1'b1 : 1'b0);

assign icmp_ln91_fu_194_p2 = ((y_0_reg_89 == 3'd4) ? 1'b1 : 1'b0);

assign icmp_ln93_fu_216_p2 = ((c_0_reg_114 == 2'd2) ? 1'b1 : 1'b0);

assign icmp_ln94_fu_264_p2 = ((r_0_reg_137 == 2'd2) ? 1'b1 : 1'b0);

assign input_r_address0 = zext_ln95_fu_290_p1;

assign m_fu_154_p2 = (m_0_reg_66 + 6'd1);

assign or_ln95_fu_295_p2 = (max_1_reg_125 | input_r_q0);

assign output_r_address0 = zext_ln99_1_fu_255_p1;

assign output_r_d0 = max_0_reg_101;

assign r_fu_270_p2 = (r_0_reg_137 + 2'd1);

assign shl_ln95_1_fu_206_p2 = y_0_reg_89 << 3'd1;

assign shl_ln95_fu_184_p2 = x_0_reg_78 << 3'd1;

assign tmp_10_cast_fu_242_p3 = {{add_ln99_fu_237_p2}, {2'd0}};

assign tmp_fu_160_p3 = {{m_0_reg_66}, {2'd0}};

assign tmp_s_fu_281_p4 = {{{m_0_reg_66}, {add_ln95_1_fu_276_p2}}, {add_ln95_reg_353}};

assign x_fu_178_p2 = (x_0_reg_78 + 3'd1);

assign y_fu_200_p2 = (y_0_reg_89 + 3'd1);

assign zext_ln90_fu_168_p1 = tmp_fu_160_p3;

assign zext_ln91_fu_190_p1 = x_0_reg_78;

assign zext_ln93_fu_212_p1 = c_0_reg_114;

assign zext_ln94_fu_260_p1 = r_0_reg_137;

assign zext_ln95_fu_290_p1 = tmp_s_fu_281_p4;

assign zext_ln99_1_fu_255_p1 = add_ln99_1_fu_250_p2;

assign zext_ln99_fu_233_p1 = y_0_reg_89;

always @ (posedge ap_clk) begin
    zext_ln90_reg_309[1:0] <= 2'b00;
    zext_ln90_reg_309[8] <= 1'b0;
    shl_ln95_reg_322[0] <= 1'b0;
    zext_ln91_reg_327[10:3] <= 8'b00000000;
    shl_ln95_1_reg_340[0] <= 1'b0;
end

endmodule //max_pool_32_8_s
