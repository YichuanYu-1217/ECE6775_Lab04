// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module conv_16_32_10_s (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        input_r_address0,
        input_r_ce0,
        input_r_q0,
        output_r_address0,
        output_r_ce0,
        output_r_we0,
        output_r_d0
);

parameter    ap_ST_fsm_state1 = 10'd1;
parameter    ap_ST_fsm_state2 = 10'd2;
parameter    ap_ST_fsm_state3 = 10'd4;
parameter    ap_ST_fsm_state4 = 10'd8;
parameter    ap_ST_fsm_state5 = 10'd16;
parameter    ap_ST_fsm_state6 = 10'd32;
parameter    ap_ST_fsm_state7 = 10'd64;
parameter    ap_ST_fsm_state8 = 10'd128;
parameter    ap_ST_fsm_state9 = 10'd256;
parameter    ap_ST_fsm_state10 = 10'd512;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [10:0] input_r_address0;
output   input_r_ce0;
input  [0:0] input_r_q0;
output  [10:0] output_r_address0;
output   output_r_ce0;
output   output_r_we0;
output  [0:0] output_r_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg input_r_ce0;
reg output_r_ce0;
reg output_r_we0;

(* fsm_encoding = "none" *) reg   [9:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [4:0] threshold_conv2_V_address0;
reg    threshold_conv2_V_ce0;
wire   [4:0] threshold_conv2_V_q0;
wire   [12:0] w_conv2_address0;
reg    w_conv2_ce0;
wire   [0:0] w_conv2_q0;
wire   [5:0] n_fu_237_p2;
reg   [5:0] n_reg_582;
wire    ap_CS_fsm_state2;
wire   [0:0] icmp_ln61_fu_231_p2;
wire   [10:0] zext_ln73_fu_248_p1;
reg   [10:0] zext_ln73_reg_592;
wire    ap_CS_fsm_state3;
wire   [9:0] zext_ln895_fu_260_p1;
reg   [9:0] zext_ln895_reg_597;
wire  signed [15:0] sext_ln62_fu_264_p1;
reg  signed [15:0] sext_ln62_reg_602;
wire   [3:0] x_fu_274_p2;
reg   [3:0] x_reg_610;
wire    ap_CS_fsm_state4;
wire   [12:0] zext_ln63_fu_280_p1;
reg   [12:0] zext_ln63_reg_615;
wire   [0:0] icmp_ln62_fu_268_p2;
wire   [3:0] y_fu_290_p2;
reg   [3:0] y_reg_623;
wire    ap_CS_fsm_state5;
wire   [1:0] c_fu_306_p2;
reg   [1:0] c_reg_631;
wire    ap_CS_fsm_state6;
wire   [11:0] zext_ln68_1_fu_318_p1;
reg   [11:0] zext_ln68_1_reg_636;
wire   [0:0] icmp_ln65_fu_300_p2;
wire   [13:0] zext_ln66_1_fu_322_p1;
reg   [13:0] zext_ln66_1_reg_641;
wire   [1:0] r_fu_381_p2;
reg   [1:0] r_reg_649;
wire    ap_CS_fsm_state7;
wire   [8:0] zext_ln68_2_fu_393_p1;
reg   [8:0] zext_ln68_2_reg_654;
wire   [0:0] icmp_ln66_fu_375_p2;
wire   [63:0] zext_ln68_3_fu_397_p1;
reg   [63:0] zext_ln68_3_reg_659;
wire   [4:0] m_fu_407_p2;
reg   [4:0] m_reg_667;
wire    ap_CS_fsm_state8;
wire   [13:0] trunc_ln68_fu_457_p1;
reg   [13:0] trunc_ln68_reg_672;
wire   [0:0] icmp_ln67_fu_401_p2;
wire   [11:0] trunc_ln68_1_fu_461_p1;
reg   [11:0] trunc_ln68_1_reg_677;
wire   [11:0] add_ln68_8_fu_526_p2;
reg   [11:0] add_ln68_8_reg_682;
wire    ap_CS_fsm_state9;
wire   [15:0] accum_V_1_fu_573_p2;
wire    ap_CS_fsm_state10;
reg   [5:0] n_0_reg_126;
reg   [3:0] x_0_reg_138;
wire   [0:0] icmp_ln63_fu_284_p2;
reg   [3:0] y_0_reg_150;
reg   [15:0] p_014_0_reg_162;
reg   [1:0] c_0_reg_174;
reg   [15:0] p_014_1_reg_185;
reg   [1:0] r_0_reg_197;
reg   [15:0] p_014_2_reg_208;
reg   [4:0] m_0_reg_220;
wire   [63:0] zext_ln68_fu_243_p1;
wire   [63:0] zext_ln73_2_fu_366_p1;
wire   [63:0] zext_ln68_7_fu_548_p1;
wire   [63:0] zext_ln68_11_fu_553_p1;
wire   [8:0] tmp_fu_252_p3;
wire   [3:0] zext_ln65_fu_296_p1;
wire   [3:0] add_ln68_fu_312_p2;
wire   [15:0] shl_ln1503_fu_326_p2;
wire   [15:0] accum_V_fu_332_p2;
wire   [9:0] zext_ln73_1_fu_344_p1;
wire   [9:0] add_ln73_fu_348_p2;
wire   [12:0] tmp_25_cast_fu_353_p3;
wire   [12:0] add_ln73_1_fu_361_p2;
wire   [3:0] zext_ln66_fu_371_p1;
wire   [3:0] add_ln68_1_fu_387_p2;
wire   [9:0] tmp_s_fu_413_p3;
wire   [10:0] zext_ln68_4_fu_421_p1;
wire   [10:0] add_ln68_2_fu_425_p2;
wire   [12:0] tmp_3_fu_434_p3;
wire   [63:0] zext_ln68_6_fu_442_p1;
wire   [63:0] zext_ln68_5_fu_430_p1;
wire   [63:0] sub_ln68_fu_446_p2;
wire   [63:0] add_ln68_3_fu_452_p2;
wire   [7:0] tmp_1_fu_465_p3;
wire   [5:0] tmp_2_fu_477_p3;
wire   [8:0] zext_ln68_9_fu_485_p1;
wire   [8:0] zext_ln68_8_fu_473_p1;
wire   [8:0] add_ln68_5_fu_489_p2;
wire   [8:0] add_ln68_6_fu_495_p2;
wire   [9:0] tmp_4_fu_508_p3;
wire   [11:0] zext_ln68_10_fu_516_p1;
wire   [11:0] p_shl_cast_fu_500_p3;
wire   [11:0] add_ln68_7_fu_520_p2;
wire   [13:0] p_shl4_cast_fu_531_p3;
wire   [13:0] sub_ln68_1_fu_538_p2;
wire   [13:0] add_ln68_4_fu_543_p2;
wire   [0:0] xor_ln68_fu_557_p2;
wire   [0:0] xor_ln68_1_fu_563_p2;
wire   [15:0] zext_ln700_fu_569_p1;
reg   [9:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 10'd1;
end

conv_16_32_10_s_tdEe #(
    .DataWidth( 5 ),
    .AddressRange( 32 ),
    .AddressWidth( 5 ))
threshold_conv2_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(threshold_conv2_V_address0),
    .ce0(threshold_conv2_V_ce0),
    .q0(threshold_conv2_V_q0)
);

conv_16_32_10_s_weOg #(
    .DataWidth( 1 ),
    .AddressRange( 4608 ),
    .AddressWidth( 13 ))
w_conv2_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(w_conv2_address0),
    .ce0(w_conv2_ce0),
    .q0(w_conv2_q0)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln63_fu_284_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        c_0_reg_174 <= 2'd0;
    end else if (((1'b1 == ap_CS_fsm_state7) & (icmp_ln66_fu_375_p2 == 1'd1))) begin
        c_0_reg_174 <= c_reg_631;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln66_fu_375_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state7))) begin
        m_0_reg_220 <= 5'd0;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        m_0_reg_220 <= m_reg_667;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln62_fu_268_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        n_0_reg_126 <= n_reg_582;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        n_0_reg_126 <= 6'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln63_fu_284_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        p_014_0_reg_162 <= 16'd0;
    end else if (((1'b1 == ap_CS_fsm_state7) & (icmp_ln66_fu_375_p2 == 1'd1))) begin
        p_014_0_reg_162 <= p_014_1_reg_185;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state8) & (icmp_ln67_fu_401_p2 == 1'd1))) begin
        p_014_1_reg_185 <= p_014_2_reg_208;
    end else if (((icmp_ln65_fu_300_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state6))) begin
        p_014_1_reg_185 <= p_014_0_reg_162;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln66_fu_375_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state7))) begin
        p_014_2_reg_208 <= p_014_1_reg_185;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        p_014_2_reg_208 <= accum_V_1_fu_573_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state8) & (icmp_ln67_fu_401_p2 == 1'd1))) begin
        r_0_reg_197 <= r_reg_649;
    end else if (((icmp_ln65_fu_300_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state6))) begin
        r_0_reg_197 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state5) & (icmp_ln63_fu_284_p2 == 1'd1))) begin
        x_0_reg_138 <= x_reg_610;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        x_0_reg_138 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln62_fu_268_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        y_0_reg_150 <= 4'd0;
    end else if (((1'b1 == ap_CS_fsm_state6) & (icmp_ln65_fu_300_p2 == 1'd1))) begin
        y_0_reg_150 <= y_reg_623;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln67_fu_401_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state8))) begin
        add_ln68_8_reg_682 <= add_ln68_8_fu_526_p2;
        trunc_ln68_1_reg_677 <= trunc_ln68_1_fu_461_p1;
        trunc_ln68_reg_672 <= trunc_ln68_fu_457_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        c_reg_631 <= c_fu_306_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        m_reg_667 <= m_fu_407_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        n_reg_582 <= n_fu_237_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        r_reg_649 <= r_fu_381_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        sext_ln62_reg_602 <= sext_ln62_fu_264_p1;
        zext_ln73_reg_592[5 : 0] <= zext_ln73_fu_248_p1[5 : 0];
        zext_ln895_reg_597[8 : 3] <= zext_ln895_fu_260_p1[8 : 3];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        x_reg_610 <= x_fu_274_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        y_reg_623 <= y_fu_290_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln62_fu_268_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        zext_ln63_reg_615[3 : 0] <= zext_ln63_fu_280_p1[3 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln65_fu_300_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state6))) begin
        zext_ln66_1_reg_641[1 : 0] <= zext_ln66_1_fu_322_p1[1 : 0];
        zext_ln68_1_reg_636[3 : 0] <= zext_ln68_1_fu_318_p1[3 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln66_fu_375_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state7))) begin
        zext_ln68_2_reg_654[3 : 0] <= zext_ln68_2_fu_393_p1[3 : 0];
        zext_ln68_3_reg_659[1 : 0] <= zext_ln68_3_fu_397_p1[1 : 0];
    end
end

always @ (*) begin
    if ((((icmp_ln61_fu_231_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2)) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln61_fu_231_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        input_r_ce0 = 1'b1;
    end else begin
        input_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        output_r_ce0 = 1'b1;
    end else begin
        output_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) & (icmp_ln65_fu_300_p2 == 1'd1))) begin
        output_r_we0 = 1'b1;
    end else begin
        output_r_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        threshold_conv2_V_ce0 = 1'b1;
    end else begin
        threshold_conv2_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        w_conv2_ce0 = 1'b1;
    end else begin
        w_conv2_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln61_fu_231_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            if (((icmp_ln62_fu_268_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((1'b1 == ap_CS_fsm_state5) & (icmp_ln63_fu_284_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state6 : begin
            if (((1'b1 == ap_CS_fsm_state6) & (icmp_ln65_fu_300_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state7 : begin
            if (((1'b1 == ap_CS_fsm_state7) & (icmp_ln66_fu_375_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_state8 : begin
            if (((1'b1 == ap_CS_fsm_state8) & (icmp_ln67_fu_401_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign accum_V_1_fu_573_p2 = (p_014_2_reg_208 + zext_ln700_fu_569_p1);

assign accum_V_fu_332_p2 = ($signed(16'd65392) + $signed(shl_ln1503_fu_326_p2));

assign add_ln68_1_fu_387_p2 = (zext_ln66_fu_371_p1 + y_0_reg_150);

assign add_ln68_2_fu_425_p2 = (zext_ln68_4_fu_421_p1 + zext_ln73_reg_592);

assign add_ln68_3_fu_452_p2 = (sub_ln68_fu_446_p2 + zext_ln68_3_reg_659);

assign add_ln68_4_fu_543_p2 = (sub_ln68_1_fu_538_p2 + zext_ln66_1_reg_641);

assign add_ln68_5_fu_489_p2 = (zext_ln68_9_fu_485_p1 + zext_ln68_8_fu_473_p1);

assign add_ln68_6_fu_495_p2 = (add_ln68_5_fu_489_p2 + zext_ln68_2_reg_654);

assign add_ln68_7_fu_520_p2 = (zext_ln68_10_fu_516_p1 + p_shl_cast_fu_500_p3);

assign add_ln68_8_fu_526_p2 = (add_ln68_7_fu_520_p2 + zext_ln68_1_reg_636);

assign add_ln68_fu_312_p2 = (zext_ln65_fu_296_p1 + x_0_reg_138);

assign add_ln73_1_fu_361_p2 = (tmp_25_cast_fu_353_p3 + zext_ln63_reg_615);

assign add_ln73_fu_348_p2 = (zext_ln895_reg_597 + zext_ln73_1_fu_344_p1);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign c_fu_306_p2 = (c_0_reg_174 + 2'd1);

assign icmp_ln61_fu_231_p2 = ((n_0_reg_126 == 6'd32) ? 1'b1 : 1'b0);

assign icmp_ln62_fu_268_p2 = ((x_0_reg_138 == 4'd8) ? 1'b1 : 1'b0);

assign icmp_ln63_fu_284_p2 = ((y_0_reg_150 == 4'd8) ? 1'b1 : 1'b0);

assign icmp_ln65_fu_300_p2 = ((c_0_reg_174 == 2'd3) ? 1'b1 : 1'b0);

assign icmp_ln66_fu_375_p2 = ((r_0_reg_197 == 2'd3) ? 1'b1 : 1'b0);

assign icmp_ln67_fu_401_p2 = ((m_0_reg_220 == 5'd16) ? 1'b1 : 1'b0);

assign input_r_address0 = zext_ln68_11_fu_553_p1;

assign m_fu_407_p2 = (m_0_reg_220 + 5'd1);

assign n_fu_237_p2 = (n_0_reg_126 + 6'd1);

assign output_r_address0 = zext_ln73_2_fu_366_p1;

assign output_r_d0 = (($signed(accum_V_fu_332_p2) > $signed(sext_ln62_reg_602)) ? 1'b1 : 1'b0);

assign p_shl4_cast_fu_531_p3 = {{trunc_ln68_1_reg_677}, {2'd0}};

assign p_shl_cast_fu_500_p3 = {{add_ln68_6_fu_495_p2}, {3'd0}};

assign r_fu_381_p2 = (r_0_reg_197 + 2'd1);

assign sext_ln62_fu_264_p1 = $signed(threshold_conv2_V_q0);

assign shl_ln1503_fu_326_p2 = p_014_0_reg_162 << 16'd1;

assign sub_ln68_1_fu_538_p2 = (p_shl4_cast_fu_531_p3 - trunc_ln68_reg_672);

assign sub_ln68_fu_446_p2 = (zext_ln68_6_fu_442_p1 - zext_ln68_5_fu_430_p1);

assign threshold_conv2_V_address0 = zext_ln68_fu_243_p1;

assign tmp_1_fu_465_p3 = {{m_0_reg_220}, {3'd0}};

assign tmp_25_cast_fu_353_p3 = {{add_ln73_fu_348_p2}, {3'd0}};

assign tmp_2_fu_477_p3 = {{m_0_reg_220}, {1'd0}};

assign tmp_3_fu_434_p3 = {{add_ln68_2_fu_425_p2}, {2'd0}};

assign tmp_4_fu_508_p3 = {{add_ln68_6_fu_495_p2}, {1'd0}};

assign tmp_fu_252_p3 = {{n_0_reg_126}, {3'd0}};

assign tmp_s_fu_413_p3 = {{m_0_reg_220}, {5'd0}};

assign trunc_ln68_1_fu_461_p1 = add_ln68_3_fu_452_p2[11:0];

assign trunc_ln68_fu_457_p1 = add_ln68_3_fu_452_p2[13:0];

assign w_conv2_address0 = zext_ln68_7_fu_548_p1;

assign x_fu_274_p2 = (x_0_reg_138 + 4'd1);

assign xor_ln68_1_fu_563_p2 = (xor_ln68_fu_557_p2 ^ input_r_q0);

assign xor_ln68_fu_557_p2 = (w_conv2_q0 ^ 1'd1);

assign y_fu_290_p2 = (y_0_reg_150 + 4'd1);

assign zext_ln63_fu_280_p1 = x_0_reg_138;

assign zext_ln65_fu_296_p1 = c_0_reg_174;

assign zext_ln66_1_fu_322_p1 = c_0_reg_174;

assign zext_ln66_fu_371_p1 = r_0_reg_197;

assign zext_ln68_10_fu_516_p1 = tmp_4_fu_508_p3;

assign zext_ln68_11_fu_553_p1 = add_ln68_8_reg_682;

assign zext_ln68_1_fu_318_p1 = add_ln68_fu_312_p2;

assign zext_ln68_2_fu_393_p1 = add_ln68_1_fu_387_p2;

assign zext_ln68_3_fu_397_p1 = r_0_reg_197;

assign zext_ln68_4_fu_421_p1 = tmp_s_fu_413_p3;

assign zext_ln68_5_fu_430_p1 = add_ln68_2_fu_425_p2;

assign zext_ln68_6_fu_442_p1 = tmp_3_fu_434_p3;

assign zext_ln68_7_fu_548_p1 = add_ln68_4_fu_543_p2;

assign zext_ln68_8_fu_473_p1 = tmp_1_fu_465_p3;

assign zext_ln68_9_fu_485_p1 = tmp_2_fu_477_p3;

assign zext_ln68_fu_243_p1 = n_0_reg_126;

assign zext_ln700_fu_569_p1 = xor_ln68_1_fu_563_p2;

assign zext_ln73_1_fu_344_p1 = y_0_reg_150;

assign zext_ln73_2_fu_366_p1 = add_ln73_1_fu_361_p2;

assign zext_ln73_fu_248_p1 = n_0_reg_126;

assign zext_ln895_fu_260_p1 = tmp_fu_252_p3;

always @ (posedge ap_clk) begin
    zext_ln73_reg_592[10:6] <= 5'b00000;
    zext_ln895_reg_597[2:0] <= 3'b000;
    zext_ln895_reg_597[9] <= 1'b0;
    zext_ln63_reg_615[12:4] <= 9'b000000000;
    zext_ln68_1_reg_636[11:4] <= 8'b00000000;
    zext_ln66_1_reg_641[13:2] <= 12'b000000000000;
    zext_ln68_2_reg_654[8:4] <= 5'b00000;
    zext_ln68_3_reg_659[63:2] <= 62'b00000000000000000000000000000000000000000000000000000000000000;
end

endmodule //conv_16_32_10_s
