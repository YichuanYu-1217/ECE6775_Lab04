// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _initialize_padded_me_HH_
#define _initialize_padded_me_HH_

#include "systemc.h"
#include "AESL_pkg.h"


namespace ap_rtl {

struct initialize_padded_me : public sc_module {
    // Port declarations 10
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_out< sc_lv<11> > input_r_address0;
    sc_out< sc_logic > input_r_ce0;
    sc_out< sc_logic > input_r_we0;
    sc_out< sc_lv<1> > input_r_d0;


    // Module declarations
    initialize_padded_me(sc_module_name name);
    SC_HAS_PROCESS(initialize_padded_me);

    ~initialize_padded_me();

    sc_trace_file* mVcdFile;

    sc_signal< sc_lv<4> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_lv<5> > m_fu_87_p2;
    sc_signal< sc_lv<5> > m_reg_199;
    sc_signal< sc_logic > ap_CS_fsm_state2;
    sc_signal< sc_lv<9> > add_ln41_fu_117_p2;
    sc_signal< sc_lv<9> > add_ln41_reg_204;
    sc_signal< sc_lv<1> > icmp_ln38_fu_81_p2;
    sc_signal< sc_lv<4> > x_fu_129_p2;
    sc_signal< sc_lv<4> > x_reg_212;
    sc_signal< sc_logic > ap_CS_fsm_state3;
    sc_signal< sc_lv<12> > add_ln41_2_fu_164_p2;
    sc_signal< sc_lv<12> > add_ln41_2_reg_217;
    sc_signal< sc_lv<1> > icmp_ln39_fu_123_p2;
    sc_signal< sc_lv<4> > y_fu_176_p2;
    sc_signal< sc_logic > ap_CS_fsm_state4;
    sc_signal< sc_lv<5> > m_0_reg_48;
    sc_signal< sc_lv<4> > x_0_reg_59;
    sc_signal< sc_lv<1> > icmp_ln40_fu_170_p2;
    sc_signal< sc_lv<4> > y_0_reg_70;
    sc_signal< sc_lv<64> > zext_ln41_5_fu_191_p1;
    sc_signal< sc_lv<8> > tmp_fu_93_p3;
    sc_signal< sc_lv<6> > tmp_s_fu_105_p3;
    sc_signal< sc_lv<9> > zext_ln41_1_fu_113_p1;
    sc_signal< sc_lv<9> > zext_ln41_fu_101_p1;
    sc_signal< sc_lv<9> > zext_ln41_2_fu_135_p1;
    sc_signal< sc_lv<9> > add_ln41_1_fu_139_p2;
    sc_signal< sc_lv<10> > tmp_2_fu_152_p3;
    sc_signal< sc_lv<12> > p_shl2_cast_fu_144_p3;
    sc_signal< sc_lv<12> > zext_ln41_3_fu_160_p1;
    sc_signal< sc_lv<12> > zext_ln41_4_fu_182_p1;
    sc_signal< sc_lv<12> > add_ln41_3_fu_186_p2;
    sc_signal< sc_lv<4> > ap_NS_fsm;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<4> ap_ST_fsm_state1;
    static const sc_lv<4> ap_ST_fsm_state2;
    static const sc_lv<4> ap_ST_fsm_state3;
    static const sc_lv<4> ap_ST_fsm_state4;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<32> ap_const_lv32_3;
    static const sc_lv<5> ap_const_lv5_0;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<4> ap_const_lv4_0;
    static const sc_lv<5> ap_const_lv5_10;
    static const sc_lv<5> ap_const_lv5_1;
    static const sc_lv<3> ap_const_lv3_0;
    static const sc_lv<4> ap_const_lv4_A;
    static const sc_lv<4> ap_const_lv4_1;
    static const bool ap_const_boolean_1;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_add_ln41_1_fu_139_p2();
    void thread_add_ln41_2_fu_164_p2();
    void thread_add_ln41_3_fu_186_p2();
    void thread_add_ln41_fu_117_p2();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state2();
    void thread_ap_CS_fsm_state3();
    void thread_ap_CS_fsm_state4();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_icmp_ln38_fu_81_p2();
    void thread_icmp_ln39_fu_123_p2();
    void thread_icmp_ln40_fu_170_p2();
    void thread_input_r_address0();
    void thread_input_r_ce0();
    void thread_input_r_d0();
    void thread_input_r_we0();
    void thread_m_fu_87_p2();
    void thread_p_shl2_cast_fu_144_p3();
    void thread_tmp_2_fu_152_p3();
    void thread_tmp_fu_93_p3();
    void thread_tmp_s_fu_105_p3();
    void thread_x_fu_129_p2();
    void thread_y_fu_176_p2();
    void thread_zext_ln41_1_fu_113_p1();
    void thread_zext_ln41_2_fu_135_p1();
    void thread_zext_ln41_3_fu_160_p1();
    void thread_zext_ln41_4_fu_182_p1();
    void thread_zext_ln41_5_fu_191_p1();
    void thread_zext_ln41_fu_101_p1();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
