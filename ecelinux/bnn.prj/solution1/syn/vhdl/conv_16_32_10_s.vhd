-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity conv_16_32_10_s is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    input_r_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    input_r_ce0 : OUT STD_LOGIC;
    input_r_q0 : IN STD_LOGIC_VECTOR (0 downto 0);
    output_r_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    output_r_ce0 : OUT STD_LOGIC;
    output_r_we0 : OUT STD_LOGIC;
    output_r_d0 : OUT STD_LOGIC_VECTOR (0 downto 0) );
end;


architecture behav of conv_16_32_10_s is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (9 downto 0) := "0000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (9 downto 0) := "0000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (9 downto 0) := "0000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (9 downto 0) := "0000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (9 downto 0) := "0000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (9 downto 0) := "0001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (9 downto 0) := "0010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (9 downto 0) := "0100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (9 downto 0) := "1000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv6_20 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv16_1 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";
    constant ap_const_lv16_FF70 : STD_LOGIC_VECTOR (15 downto 0) := "1111111101110000";
    constant ap_const_lv5_10 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal threshold_conv2_V_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal threshold_conv2_V_ce0 : STD_LOGIC;
    signal threshold_conv2_V_q0 : STD_LOGIC_VECTOR (4 downto 0);
    signal w_conv2_address0 : STD_LOGIC_VECTOR (12 downto 0);
    signal w_conv2_ce0 : STD_LOGIC;
    signal w_conv2_q0 : STD_LOGIC_VECTOR (0 downto 0);
    signal n_fu_237_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal n_reg_582 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal icmp_ln61_fu_231_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln73_fu_248_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln73_reg_592 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal zext_ln895_fu_260_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln895_reg_597 : STD_LOGIC_VECTOR (9 downto 0);
    signal sext_ln62_fu_264_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln62_reg_602 : STD_LOGIC_VECTOR (15 downto 0);
    signal x_fu_274_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal x_reg_610 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal zext_ln63_fu_280_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal zext_ln63_reg_615 : STD_LOGIC_VECTOR (12 downto 0);
    signal icmp_ln62_fu_268_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal y_fu_290_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal y_reg_623 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal c_fu_306_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal c_reg_631 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal zext_ln68_1_fu_318_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln68_1_reg_636 : STD_LOGIC_VECTOR (11 downto 0);
    signal icmp_ln65_fu_300_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln66_1_fu_322_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal zext_ln66_1_reg_641 : STD_LOGIC_VECTOR (13 downto 0);
    signal r_fu_381_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal r_reg_649 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal zext_ln68_2_fu_393_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln68_2_reg_654 : STD_LOGIC_VECTOR (8 downto 0);
    signal icmp_ln66_fu_375_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln68_3_fu_397_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln68_3_reg_659 : STD_LOGIC_VECTOR (63 downto 0);
    signal m_fu_407_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal m_reg_667 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal trunc_ln68_fu_457_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal trunc_ln68_reg_672 : STD_LOGIC_VECTOR (13 downto 0);
    signal icmp_ln67_fu_401_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln68_1_fu_461_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal trunc_ln68_1_reg_677 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln68_8_fu_526_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln68_8_reg_682 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal accum_V_1_fu_573_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal n_0_reg_126 : STD_LOGIC_VECTOR (5 downto 0);
    signal x_0_reg_138 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln63_fu_284_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal y_0_reg_150 : STD_LOGIC_VECTOR (3 downto 0);
    signal p_014_0_reg_162 : STD_LOGIC_VECTOR (15 downto 0);
    signal c_0_reg_174 : STD_LOGIC_VECTOR (1 downto 0);
    signal p_014_1_reg_185 : STD_LOGIC_VECTOR (15 downto 0);
    signal r_0_reg_197 : STD_LOGIC_VECTOR (1 downto 0);
    signal p_014_2_reg_208 : STD_LOGIC_VECTOR (15 downto 0);
    signal m_0_reg_220 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln68_fu_243_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln73_2_fu_366_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln68_7_fu_548_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln68_11_fu_553_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_fu_252_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln65_fu_296_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln68_fu_312_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal shl_ln1503_fu_326_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal accum_V_fu_332_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln73_1_fu_344_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln73_fu_348_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_25_cast_fu_353_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln73_1_fu_361_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal zext_ln66_fu_371_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln68_1_fu_387_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_s_fu_413_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln68_4_fu_421_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln68_2_fu_425_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_3_fu_434_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal zext_ln68_6_fu_442_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln68_5_fu_430_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sub_ln68_fu_446_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln68_3_fu_452_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_1_fu_465_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_2_fu_477_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln68_9_fu_485_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln68_8_fu_473_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln68_5_fu_489_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln68_6_fu_495_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_4_fu_508_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln68_10_fu_516_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal p_shl_cast_fu_500_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln68_7_fu_520_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal p_shl4_cast_fu_531_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal sub_ln68_1_fu_538_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln68_4_fu_543_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal xor_ln68_fu_557_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln68_1_fu_563_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln700_fu_569_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (9 downto 0);

    component conv_16_32_10_s_tdEe IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (4 downto 0) );
    end component;


    component conv_16_32_10_s_weOg IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (12 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin
    threshold_conv2_V_U : component conv_16_32_10_s_tdEe
    generic map (
        DataWidth => 5,
        AddressRange => 32,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => threshold_conv2_V_address0,
        ce0 => threshold_conv2_V_ce0,
        q0 => threshold_conv2_V_q0);

    w_conv2_U : component conv_16_32_10_s_weOg
    generic map (
        DataWidth => 1,
        AddressRange => 4608,
        AddressWidth => 13)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => w_conv2_address0,
        ce0 => w_conv2_ce0,
        q0 => w_conv2_q0);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    c_0_reg_174_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln63_fu_284_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                c_0_reg_174 <= ap_const_lv2_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state7) and (icmp_ln66_fu_375_p2 = ap_const_lv1_1))) then 
                c_0_reg_174 <= c_reg_631;
            end if; 
        end if;
    end process;

    m_0_reg_220_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln66_fu_375_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
                m_0_reg_220 <= ap_const_lv5_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
                m_0_reg_220 <= m_reg_667;
            end if; 
        end if;
    end process;

    n_0_reg_126_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln62_fu_268_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                n_0_reg_126 <= n_reg_582;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                n_0_reg_126 <= ap_const_lv6_0;
            end if; 
        end if;
    end process;

    p_014_0_reg_162_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln63_fu_284_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                p_014_0_reg_162 <= ap_const_lv16_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state7) and (icmp_ln66_fu_375_p2 = ap_const_lv1_1))) then 
                p_014_0_reg_162 <= p_014_1_reg_185;
            end if; 
        end if;
    end process;

    p_014_1_reg_185_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state8) and (icmp_ln67_fu_401_p2 = ap_const_lv1_1))) then 
                p_014_1_reg_185 <= p_014_2_reg_208;
            elsif (((icmp_ln65_fu_300_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                p_014_1_reg_185 <= p_014_0_reg_162;
            end if; 
        end if;
    end process;

    p_014_2_reg_208_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln66_fu_375_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
                p_014_2_reg_208 <= p_014_1_reg_185;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
                p_014_2_reg_208 <= accum_V_1_fu_573_p2;
            end if; 
        end if;
    end process;

    r_0_reg_197_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state8) and (icmp_ln67_fu_401_p2 = ap_const_lv1_1))) then 
                r_0_reg_197 <= r_reg_649;
            elsif (((icmp_ln65_fu_300_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                r_0_reg_197 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    x_0_reg_138_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln63_fu_284_p2 = ap_const_lv1_1))) then 
                x_0_reg_138 <= x_reg_610;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                x_0_reg_138 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    y_0_reg_150_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln62_fu_268_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                y_0_reg_150 <= ap_const_lv4_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln65_fu_300_p2 = ap_const_lv1_1))) then 
                y_0_reg_150 <= y_reg_623;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln67_fu_401_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state8))) then
                add_ln68_8_reg_682 <= add_ln68_8_fu_526_p2;
                trunc_ln68_1_reg_677 <= trunc_ln68_1_fu_461_p1;
                trunc_ln68_reg_672 <= trunc_ln68_fu_457_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                c_reg_631 <= c_fu_306_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                m_reg_667 <= m_fu_407_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                n_reg_582 <= n_fu_237_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                r_reg_649 <= r_fu_381_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                sext_ln62_reg_602 <= sext_ln62_fu_264_p1;
                    zext_ln73_reg_592(5 downto 0) <= zext_ln73_fu_248_p1(5 downto 0);
                    zext_ln895_reg_597(8 downto 3) <= zext_ln895_fu_260_p1(8 downto 3);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                x_reg_610 <= x_fu_274_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                y_reg_623 <= y_fu_290_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln62_fu_268_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    zext_ln63_reg_615(3 downto 0) <= zext_ln63_fu_280_p1(3 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln65_fu_300_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                    zext_ln66_1_reg_641(1 downto 0) <= zext_ln66_1_fu_322_p1(1 downto 0);
                    zext_ln68_1_reg_636(3 downto 0) <= zext_ln68_1_fu_318_p1(3 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln66_fu_375_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state7))) then
                    zext_ln68_2_reg_654(3 downto 0) <= zext_ln68_2_fu_393_p1(3 downto 0);
                    zext_ln68_3_reg_659(1 downto 0) <= zext_ln68_3_fu_397_p1(1 downto 0);
            end if;
        end if;
    end process;
    zext_ln73_reg_592(10 downto 6) <= "00000";
    zext_ln895_reg_597(2 downto 0) <= "000";
    zext_ln895_reg_597(9) <= '0';
    zext_ln63_reg_615(12 downto 4) <= "000000000";
    zext_ln68_1_reg_636(11 downto 4) <= "00000000";
    zext_ln66_1_reg_641(13 downto 2) <= "000000000000";
    zext_ln68_2_reg_654(8 downto 4) <= "00000";
    zext_ln68_3_reg_659(63 downto 2) <= "00000000000000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln61_fu_231_p2, ap_CS_fsm_state4, icmp_ln62_fu_268_p2, ap_CS_fsm_state5, ap_CS_fsm_state6, icmp_ln65_fu_300_p2, ap_CS_fsm_state7, icmp_ln66_fu_375_p2, ap_CS_fsm_state8, icmp_ln67_fu_401_p2, icmp_ln63_fu_284_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln61_fu_231_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                if (((icmp_ln62_fu_268_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln63_fu_284_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state6 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln65_fu_300_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state7 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state7) and (icmp_ln66_fu_375_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state8 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state8) and (icmp_ln67_fu_401_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_state9;
                end if;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXX";
        end case;
    end process;
    accum_V_1_fu_573_p2 <= std_logic_vector(unsigned(p_014_2_reg_208) + unsigned(zext_ln700_fu_569_p1));
    accum_V_fu_332_p2 <= std_logic_vector(signed(ap_const_lv16_FF70) + signed(shl_ln1503_fu_326_p2));
    add_ln68_1_fu_387_p2 <= std_logic_vector(unsigned(zext_ln66_fu_371_p1) + unsigned(y_0_reg_150));
    add_ln68_2_fu_425_p2 <= std_logic_vector(unsigned(zext_ln68_4_fu_421_p1) + unsigned(zext_ln73_reg_592));
    add_ln68_3_fu_452_p2 <= std_logic_vector(unsigned(sub_ln68_fu_446_p2) + unsigned(zext_ln68_3_reg_659));
    add_ln68_4_fu_543_p2 <= std_logic_vector(unsigned(sub_ln68_1_fu_538_p2) + unsigned(zext_ln66_1_reg_641));
    add_ln68_5_fu_489_p2 <= std_logic_vector(unsigned(zext_ln68_9_fu_485_p1) + unsigned(zext_ln68_8_fu_473_p1));
    add_ln68_6_fu_495_p2 <= std_logic_vector(unsigned(add_ln68_5_fu_489_p2) + unsigned(zext_ln68_2_reg_654));
    add_ln68_7_fu_520_p2 <= std_logic_vector(unsigned(zext_ln68_10_fu_516_p1) + unsigned(p_shl_cast_fu_500_p3));
    add_ln68_8_fu_526_p2 <= std_logic_vector(unsigned(add_ln68_7_fu_520_p2) + unsigned(zext_ln68_1_reg_636));
    add_ln68_fu_312_p2 <= std_logic_vector(unsigned(zext_ln65_fu_296_p1) + unsigned(x_0_reg_138));
    add_ln73_1_fu_361_p2 <= std_logic_vector(unsigned(tmp_25_cast_fu_353_p3) + unsigned(zext_ln63_reg_615));
    add_ln73_fu_348_p2 <= std_logic_vector(unsigned(zext_ln895_reg_597) + unsigned(zext_ln73_1_fu_344_p1));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln61_fu_231_p2)
    begin
        if ((((icmp_ln61_fu_231_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2)) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, icmp_ln61_fu_231_p2)
    begin
        if (((icmp_ln61_fu_231_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    c_fu_306_p2 <= std_logic_vector(unsigned(c_0_reg_174) + unsigned(ap_const_lv2_1));
    icmp_ln61_fu_231_p2 <= "1" when (n_0_reg_126 = ap_const_lv6_20) else "0";
    icmp_ln62_fu_268_p2 <= "1" when (x_0_reg_138 = ap_const_lv4_8) else "0";
    icmp_ln63_fu_284_p2 <= "1" when (y_0_reg_150 = ap_const_lv4_8) else "0";
    icmp_ln65_fu_300_p2 <= "1" when (c_0_reg_174 = ap_const_lv2_3) else "0";
    icmp_ln66_fu_375_p2 <= "1" when (r_0_reg_197 = ap_const_lv2_3) else "0";
    icmp_ln67_fu_401_p2 <= "1" when (m_0_reg_220 = ap_const_lv5_10) else "0";
    input_r_address0 <= zext_ln68_11_fu_553_p1(11 - 1 downto 0);

    input_r_ce0_assign_proc : process(ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            input_r_ce0 <= ap_const_logic_1;
        else 
            input_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    m_fu_407_p2 <= std_logic_vector(unsigned(m_0_reg_220) + unsigned(ap_const_lv5_1));
    n_fu_237_p2 <= std_logic_vector(unsigned(n_0_reg_126) + unsigned(ap_const_lv6_1));
    output_r_address0 <= zext_ln73_2_fu_366_p1(11 - 1 downto 0);

    output_r_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            output_r_ce0 <= ap_const_logic_1;
        else 
            output_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    output_r_d0 <= "1" when (signed(accum_V_fu_332_p2) > signed(sext_ln62_reg_602)) else "0";

    output_r_we0_assign_proc : process(ap_CS_fsm_state6, icmp_ln65_fu_300_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln65_fu_300_p2 = ap_const_lv1_1))) then 
            output_r_we0 <= ap_const_logic_1;
        else 
            output_r_we0 <= ap_const_logic_0;
        end if; 
    end process;

    p_shl4_cast_fu_531_p3 <= (trunc_ln68_1_reg_677 & ap_const_lv2_0);
    p_shl_cast_fu_500_p3 <= (add_ln68_6_fu_495_p2 & ap_const_lv3_0);
    r_fu_381_p2 <= std_logic_vector(unsigned(r_0_reg_197) + unsigned(ap_const_lv2_1));
        sext_ln62_fu_264_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(threshold_conv2_V_q0),16));

    shl_ln1503_fu_326_p2 <= std_logic_vector(shift_left(unsigned(p_014_0_reg_162),to_integer(unsigned('0' & ap_const_lv16_1(16-1 downto 0)))));
    sub_ln68_1_fu_538_p2 <= std_logic_vector(unsigned(p_shl4_cast_fu_531_p3) - unsigned(trunc_ln68_reg_672));
    sub_ln68_fu_446_p2 <= std_logic_vector(unsigned(zext_ln68_6_fu_442_p1) - unsigned(zext_ln68_5_fu_430_p1));
    threshold_conv2_V_address0 <= zext_ln68_fu_243_p1(5 - 1 downto 0);

    threshold_conv2_V_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            threshold_conv2_V_ce0 <= ap_const_logic_1;
        else 
            threshold_conv2_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    tmp_1_fu_465_p3 <= (m_0_reg_220 & ap_const_lv3_0);
    tmp_25_cast_fu_353_p3 <= (add_ln73_fu_348_p2 & ap_const_lv3_0);
    tmp_2_fu_477_p3 <= (m_0_reg_220 & ap_const_lv1_0);
    tmp_3_fu_434_p3 <= (add_ln68_2_fu_425_p2 & ap_const_lv2_0);
    tmp_4_fu_508_p3 <= (add_ln68_6_fu_495_p2 & ap_const_lv1_0);
    tmp_fu_252_p3 <= (n_0_reg_126 & ap_const_lv3_0);
    tmp_s_fu_413_p3 <= (m_0_reg_220 & ap_const_lv5_0);
    trunc_ln68_1_fu_461_p1 <= add_ln68_3_fu_452_p2(12 - 1 downto 0);
    trunc_ln68_fu_457_p1 <= add_ln68_3_fu_452_p2(14 - 1 downto 0);
    w_conv2_address0 <= zext_ln68_7_fu_548_p1(13 - 1 downto 0);

    w_conv2_ce0_assign_proc : process(ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            w_conv2_ce0 <= ap_const_logic_1;
        else 
            w_conv2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    x_fu_274_p2 <= std_logic_vector(unsigned(x_0_reg_138) + unsigned(ap_const_lv4_1));
    xor_ln68_1_fu_563_p2 <= (xor_ln68_fu_557_p2 xor input_r_q0);
    xor_ln68_fu_557_p2 <= (w_conv2_q0 xor ap_const_lv1_1);
    y_fu_290_p2 <= std_logic_vector(unsigned(y_0_reg_150) + unsigned(ap_const_lv4_1));
    zext_ln63_fu_280_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(x_0_reg_138),13));
    zext_ln65_fu_296_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(c_0_reg_174),4));
    zext_ln66_1_fu_322_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(c_0_reg_174),14));
    zext_ln66_fu_371_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(r_0_reg_197),4));
    zext_ln68_10_fu_516_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_4_fu_508_p3),12));
    zext_ln68_11_fu_553_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln68_8_reg_682),64));
    zext_ln68_1_fu_318_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln68_fu_312_p2),12));
    zext_ln68_2_fu_393_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln68_1_fu_387_p2),9));
    zext_ln68_3_fu_397_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(r_0_reg_197),64));
    zext_ln68_4_fu_421_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_s_fu_413_p3),11));
    zext_ln68_5_fu_430_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln68_2_fu_425_p2),64));
    zext_ln68_6_fu_442_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_3_fu_434_p3),64));
    zext_ln68_7_fu_548_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln68_4_fu_543_p2),64));
    zext_ln68_8_fu_473_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_1_fu_465_p3),9));
    zext_ln68_9_fu_485_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_2_fu_477_p3),9));
    zext_ln68_fu_243_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(n_0_reg_126),64));
    zext_ln700_fu_569_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(xor_ln68_1_fu_563_p2),16));
    zext_ln73_1_fu_344_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(y_0_reg_150),10));
    zext_ln73_2_fu_366_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln73_1_fu_361_p2),64));
    zext_ln73_fu_248_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(n_0_reg_126),11));
    zext_ln895_fu_260_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_fu_252_p3),10));
end behav;
