-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity bnn_xcel is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    input_0_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    input_0_ce0 : OUT STD_LOGIC;
    input_0_q0 : IN STD_LOGIC_VECTOR (0 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (3 downto 0) );
end;


architecture behav of bnn_xcel is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (28 downto 0) := "00000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (28 downto 0) := "00000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (28 downto 0) := "00000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (28 downto 0) := "00000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (28 downto 0) := "00000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (28 downto 0) := "00000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (28 downto 0) := "00001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (28 downto 0) := "00010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (28 downto 0) := "00100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (28 downto 0) := "01000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (28 downto 0) := "10000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv5_12 : STD_LOGIC_VECTOR (4 downto 0) := "10010";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv5_10 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv9_100 : STD_LOGIC_VECTOR (8 downto 0) := "100000000";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_const_lv10_200 : STD_LOGIC_VECTOR (9 downto 0) := "1000000000";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv11_600 : STD_LOGIC_VECTOR (10 downto 0) := "11000000000";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv4_A : STD_LOGIC_VECTOR (3 downto 0) := "1010";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv10_300 : STD_LOGIC_VECTOR (9 downto 0) := "1100000000";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal w_fc1_address0 : STD_LOGIC_VECTOR (16 downto 0);
    signal w_fc1_ce0 : STD_LOGIC;
    signal w_fc1_q0 : STD_LOGIC_VECTOR (0 downto 0);
    signal w_fc2_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal w_fc2_ce0 : STD_LOGIC;
    signal w_fc2_q0 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln39_fu_487_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln39_reg_926 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal add_ln41_fu_517_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln41_reg_931 : STD_LOGIC_VECTOR (9 downto 0);
    signal icmp_ln39_fu_481_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln40_fu_529_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal add_ln25_fu_555_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln25_reg_947 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal zext_ln25_fu_561_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln25_reg_952 : STD_LOGIC_VECTOR (9 downto 0);
    signal icmp_ln23_fu_549_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln24_fu_565_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln24_reg_957 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln25_1_fu_575_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln25_1_reg_965 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal icmp_ln24_fu_569_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln25_10_fu_633_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln25_10_reg_975 : STD_LOGIC_VECTOR (9 downto 0);
    signal n_fu_648_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal n_reg_983 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal zext_ln168_fu_654_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln168_reg_988 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln164_fu_642_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln166_fu_658_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal zext_ln166_reg_993 : STD_LOGIC_VECTOR (18 downto 0);
    signal m_1_fu_668_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal m_1_reg_1001 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal icmp_ln166_fu_662_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal accum_V_fu_732_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal m_fu_744_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal m_reg_1024 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal zext_ln131_fu_750_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln131_reg_1029 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln130_fu_738_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal n_1_fu_768_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal n_1_reg_1042 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state24 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state24 : signal is "none";
    signal zext_ln168_2_fu_774_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln168_2_reg_1047 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln164_1_fu_762_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln166_1_fu_778_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal zext_ln166_1_reg_1052 : STD_LOGIC_VECTOR (12 downto 0);
    signal m_2_fu_788_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal m_2_reg_1065 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state25 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state25 : signal is "none";
    signal icmp_ln166_1_fu_782_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal accum_V_2_fu_870_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state26 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state26 : signal is "none";
    signal max_V_fu_876_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state27 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state27 : signal is "none";
    signal ap_CS_fsm_state28 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state28 : signal is "none";
    signal icmp_ln144_fu_880_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln145_fu_901_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state29 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state29 : signal is "none";
    signal select_ln145_1_fu_909_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal i_fu_917_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal input_padded_0_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal input_padded_0_ce0 : STD_LOGIC;
    signal input_padded_0_we0 : STD_LOGIC;
    signal input_padded_0_d0 : STD_LOGIC_VECTOR (0 downto 0);
    signal input_padded_0_q0 : STD_LOGIC_VECTOR (0 downto 0);
    signal conv1_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal conv1_ce0 : STD_LOGIC;
    signal conv1_we0 : STD_LOGIC;
    signal conv1_q0 : STD_LOGIC_VECTOR (0 downto 0);
    signal conv1_pooled_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal conv1_pooled_ce0 : STD_LOGIC;
    signal conv1_pooled_we0 : STD_LOGIC;
    signal conv1_pooled_q0 : STD_LOGIC_VECTOR (0 downto 0);
    signal conv1_pooled_padded_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal conv1_pooled_padded_ce0 : STD_LOGIC;
    signal conv1_pooled_padded_we0 : STD_LOGIC;
    signal conv1_pooled_padded_d0 : STD_LOGIC_VECTOR (0 downto 0);
    signal conv1_pooled_padded_q0 : STD_LOGIC_VECTOR (0 downto 0);
    signal conv2_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal conv2_ce0 : STD_LOGIC;
    signal conv2_we0 : STD_LOGIC;
    signal conv2_q0 : STD_LOGIC_VECTOR (0 downto 0);
    signal conv2_pooled_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal conv2_pooled_ce0 : STD_LOGIC;
    signal conv2_pooled_we0 : STD_LOGIC;
    signal conv2_pooled_q0 : STD_LOGIC_VECTOR (0 downto 0);
    signal reshaped_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal reshaped_ce0 : STD_LOGIC;
    signal reshaped_we0 : STD_LOGIC;
    signal reshaped_q0 : STD_LOGIC_VECTOR (0 downto 0);
    signal dense1_V_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal dense1_V_ce0 : STD_LOGIC;
    signal dense1_V_we0 : STD_LOGIC;
    signal dense1_V_d0 : STD_LOGIC_VECTOR (10 downto 0);
    signal dense1_V_q0 : STD_LOGIC_VECTOR (10 downto 0);
    signal signed1_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal signed1_ce0 : STD_LOGIC;
    signal signed1_we0 : STD_LOGIC;
    signal signed1_d0 : STD_LOGIC_VECTOR (0 downto 0);
    signal signed1_q0 : STD_LOGIC_VECTOR (0 downto 0);
    signal dense2_V_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal dense2_V_ce0 : STD_LOGIC;
    signal dense2_V_we0 : STD_LOGIC;
    signal dense2_V_d0 : STD_LOGIC_VECTOR (9 downto 0);
    signal dense2_V_q0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_conv_16_32_10_s_fu_432_ap_start : STD_LOGIC;
    signal grp_conv_16_32_10_s_fu_432_ap_done : STD_LOGIC;
    signal grp_conv_16_32_10_s_fu_432_ap_idle : STD_LOGIC;
    signal grp_conv_16_32_10_s_fu_432_ap_ready : STD_LOGIC;
    signal grp_conv_16_32_10_s_fu_432_input_r_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_conv_16_32_10_s_fu_432_input_r_ce0 : STD_LOGIC;
    signal grp_conv_16_32_10_s_fu_432_output_r_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_conv_16_32_10_s_fu_432_output_r_ce0 : STD_LOGIC;
    signal grp_conv_16_32_10_s_fu_432_output_r_we0 : STD_LOGIC;
    signal grp_conv_16_32_10_s_fu_432_output_r_d0 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_conv_1_16_18_s_fu_442_ap_start : STD_LOGIC;
    signal grp_conv_1_16_18_s_fu_442_ap_done : STD_LOGIC;
    signal grp_conv_1_16_18_s_fu_442_ap_idle : STD_LOGIC;
    signal grp_conv_1_16_18_s_fu_442_ap_ready : STD_LOGIC;
    signal grp_conv_1_16_18_s_fu_442_input_0_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_conv_1_16_18_s_fu_442_input_0_ce0 : STD_LOGIC;
    signal grp_conv_1_16_18_s_fu_442_output_r_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_conv_1_16_18_s_fu_442_output_r_ce0 : STD_LOGIC;
    signal grp_conv_1_16_18_s_fu_442_output_r_we0 : STD_LOGIC;
    signal grp_conv_1_16_18_s_fu_442_output_r_d0 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_max_pool_16_16_s_fu_452_ap_start : STD_LOGIC;
    signal grp_max_pool_16_16_s_fu_452_ap_done : STD_LOGIC;
    signal grp_max_pool_16_16_s_fu_452_ap_idle : STD_LOGIC;
    signal grp_max_pool_16_16_s_fu_452_ap_ready : STD_LOGIC;
    signal grp_max_pool_16_16_s_fu_452_input_r_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_max_pool_16_16_s_fu_452_input_r_ce0 : STD_LOGIC;
    signal grp_max_pool_16_16_s_fu_452_output_r_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_max_pool_16_16_s_fu_452_output_r_ce0 : STD_LOGIC;
    signal grp_max_pool_16_16_s_fu_452_output_r_we0 : STD_LOGIC;
    signal grp_max_pool_16_16_s_fu_452_output_r_d0 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_max_pool_32_8_s_fu_458_ap_start : STD_LOGIC;
    signal grp_max_pool_32_8_s_fu_458_ap_done : STD_LOGIC;
    signal grp_max_pool_32_8_s_fu_458_ap_idle : STD_LOGIC;
    signal grp_max_pool_32_8_s_fu_458_ap_ready : STD_LOGIC;
    signal grp_max_pool_32_8_s_fu_458_input_r_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_max_pool_32_8_s_fu_458_input_r_ce0 : STD_LOGIC;
    signal grp_max_pool_32_8_s_fu_458_output_r_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_max_pool_32_8_s_fu_458_output_r_ce0 : STD_LOGIC;
    signal grp_max_pool_32_8_s_fu_458_output_r_we0 : STD_LOGIC;
    signal grp_max_pool_32_8_s_fu_458_output_r_d0 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_pad_16_8_s_fu_464_ap_start : STD_LOGIC;
    signal grp_pad_16_8_s_fu_464_ap_done : STD_LOGIC;
    signal grp_pad_16_8_s_fu_464_ap_idle : STD_LOGIC;
    signal grp_pad_16_8_s_fu_464_ap_ready : STD_LOGIC;
    signal grp_pad_16_8_s_fu_464_input_r_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_pad_16_8_s_fu_464_input_r_ce0 : STD_LOGIC;
    signal grp_pad_16_8_s_fu_464_output_r_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_pad_16_8_s_fu_464_output_r_ce0 : STD_LOGIC;
    signal grp_pad_16_8_s_fu_464_output_r_we0 : STD_LOGIC;
    signal grp_pad_16_8_s_fu_464_output_r_d0 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_flatten_fu_470_ap_start : STD_LOGIC;
    signal grp_flatten_fu_470_ap_done : STD_LOGIC;
    signal grp_flatten_fu_470_ap_idle : STD_LOGIC;
    signal grp_flatten_fu_470_ap_ready : STD_LOGIC;
    signal grp_flatten_fu_470_input_r_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_flatten_fu_470_input_r_ce0 : STD_LOGIC;
    signal grp_flatten_fu_470_output_r_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_flatten_fu_470_output_r_ce0 : STD_LOGIC;
    signal grp_flatten_fu_470_output_r_we0 : STD_LOGIC;
    signal grp_flatten_fu_470_output_r_d0 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_initialize_padded_me_fu_476_ap_start : STD_LOGIC;
    signal grp_initialize_padded_me_fu_476_ap_done : STD_LOGIC;
    signal grp_initialize_padded_me_fu_476_ap_idle : STD_LOGIC;
    signal grp_initialize_padded_me_fu_476_ap_ready : STD_LOGIC;
    signal grp_initialize_padded_me_fu_476_input_r_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_initialize_padded_me_fu_476_input_r_ce0 : STD_LOGIC;
    signal grp_initialize_padded_me_fu_476_input_r_we0 : STD_LOGIC;
    signal grp_initialize_padded_me_fu_476_input_r_d0 : STD_LOGIC_VECTOR (0 downto 0);
    signal x_0_0_i_reg_275 : STD_LOGIC_VECTOR (4 downto 0);
    signal icmp_ln40_fu_523_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal y_0_0_i_reg_286 : STD_LOGIC_VECTOR (4 downto 0);
    signal x_0_0_i1_reg_297 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal y_0_0_i3_reg_308 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal n_0_i_reg_319 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal p_04_0_i_reg_330 : STD_LOGIC_VECTOR (9 downto 0);
    signal m_0_i_reg_342 : STD_LOGIC_VECTOR (9 downto 0);
    signal m_0_i7_reg_353 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state23 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state23 : signal is "none";
    signal n_0_i9_reg_364 : STD_LOGIC_VECTOR (3 downto 0);
    signal p_04_0_i13_reg_375 : STD_LOGIC_VECTOR (8 downto 0);
    signal m_0_i14_reg_387 : STD_LOGIC_VECTOR (8 downto 0);
    signal agg_result_V_0_i_reg_398 : STD_LOGIC_VECTOR (3 downto 0);
    signal p_012_0_i_reg_410 : STD_LOGIC_VECTOR (15 downto 0);
    signal max_id_V_reg_420 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_conv_16_32_10_s_fu_432_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal grp_conv_1_16_18_s_fu_442_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal grp_max_pool_16_16_s_fu_452_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal grp_max_pool_32_8_s_fu_458_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal grp_pad_16_8_s_fu_464_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal grp_flatten_fu_470_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal grp_initialize_padded_me_fu_476_ap_start_reg : STD_LOGIC := '0';
    signal zext_ln41_8_fu_544_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln25_8_fu_598_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln25_11_fu_638_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln168_5_fu_696_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln168_1_fu_674_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln168_8_fu_834_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln168_3_fu_794_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln145_fu_886_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_fu_493_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_s_fu_505_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln41_6_fu_513_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln41_fu_501_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln41_7_fu_535_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln41_4_fu_539_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_5_fu_581_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln25_7_fu_589_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln25_8_fu_593_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_6_fu_603_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_7_fu_615_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln25_10_fu_623_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln25_9_fu_611_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln25_9_fu_627_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_8_fu_679_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal zext_ln168_4_fu_687_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal add_ln168_fu_691_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal shl_ln_fu_701_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal xor_ln168_fu_716_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln168_1_fu_722_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln700_fu_728_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_9_fu_799_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_10_fu_811_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln168_7_fu_819_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal zext_ln168_6_fu_807_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln168_1_fu_823_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln168_2_fu_829_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal shl_ln1503_1_fu_839_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal xor_ln168_2_fu_854_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln168_3_fu_860_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln700_1_fu_866_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal max_V_1_fu_891_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln895_1_fu_895_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_return_preg : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (28 downto 0);

    component conv_16_32_10_s IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        input_r_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
        input_r_ce0 : OUT STD_LOGIC;
        input_r_q0 : IN STD_LOGIC_VECTOR (0 downto 0);
        output_r_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
        output_r_ce0 : OUT STD_LOGIC;
        output_r_we0 : OUT STD_LOGIC;
        output_r_d0 : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component conv_1_16_18_s IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        input_0_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
        input_0_ce0 : OUT STD_LOGIC;
        input_0_q0 : IN STD_LOGIC_VECTOR (0 downto 0);
        output_r_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        output_r_ce0 : OUT STD_LOGIC;
        output_r_we0 : OUT STD_LOGIC;
        output_r_d0 : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component max_pool_16_16_s IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        input_r_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        input_r_ce0 : OUT STD_LOGIC;
        input_r_q0 : IN STD_LOGIC_VECTOR (0 downto 0);
        output_r_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        output_r_ce0 : OUT STD_LOGIC;
        output_r_we0 : OUT STD_LOGIC;
        output_r_d0 : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component max_pool_32_8_s IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        input_r_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
        input_r_ce0 : OUT STD_LOGIC;
        input_r_q0 : IN STD_LOGIC_VECTOR (0 downto 0);
        output_r_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
        output_r_ce0 : OUT STD_LOGIC;
        output_r_we0 : OUT STD_LOGIC;
        output_r_d0 : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component pad_16_8_s IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        input_r_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        input_r_ce0 : OUT STD_LOGIC;
        input_r_q0 : IN STD_LOGIC_VECTOR (0 downto 0);
        output_r_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
        output_r_ce0 : OUT STD_LOGIC;
        output_r_we0 : OUT STD_LOGIC;
        output_r_d0 : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component flatten IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        input_r_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
        input_r_ce0 : OUT STD_LOGIC;
        input_r_q0 : IN STD_LOGIC_VECTOR (0 downto 0);
        output_r_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
        output_r_ce0 : OUT STD_LOGIC;
        output_r_we0 : OUT STD_LOGIC;
        output_r_d0 : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component initialize_padded_me IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        input_r_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
        input_r_ce0 : OUT STD_LOGIC;
        input_r_we0 : OUT STD_LOGIC;
        input_r_d0 : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component bnn_xcel_w_fc1 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (16 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component bnn_xcel_w_fc2 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (11 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component bnn_xcel_input_pafYi IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (8 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (0 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component bnn_xcel_conv1 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (11 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (0 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component bnn_xcel_conv1_pog8j IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (0 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component bnn_xcel_conv1_pohbi IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (10 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (0 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component bnn_xcel_conv2 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (10 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (0 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component bnn_xcel_conv2_poibs IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (8 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (0 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component bnn_xcel_dense1_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (10 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (10 downto 0) );
    end component;


    component bnn_xcel_signed1 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (0 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component bnn_xcel_dense2_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (9 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (9 downto 0) );
    end component;



begin
    w_fc1_U : component bnn_xcel_w_fc1
    generic map (
        DataWidth => 1,
        AddressRange => 131072,
        AddressWidth => 17)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => w_fc1_address0,
        ce0 => w_fc1_ce0,
        q0 => w_fc1_q0);

    w_fc2_U : component bnn_xcel_w_fc2
    generic map (
        DataWidth => 1,
        AddressRange => 2560,
        AddressWidth => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => w_fc2_address0,
        ce0 => w_fc2_ce0,
        q0 => w_fc2_q0);

    input_padded_0_U : component bnn_xcel_input_pafYi
    generic map (
        DataWidth => 1,
        AddressRange => 324,
        AddressWidth => 9)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => input_padded_0_address0,
        ce0 => input_padded_0_ce0,
        we0 => input_padded_0_we0,
        d0 => input_padded_0_d0,
        q0 => input_padded_0_q0);

    conv1_U : component bnn_xcel_conv1
    generic map (
        DataWidth => 1,
        AddressRange => 4096,
        AddressWidth => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => conv1_address0,
        ce0 => conv1_ce0,
        we0 => conv1_we0,
        d0 => grp_conv_1_16_18_s_fu_442_output_r_d0,
        q0 => conv1_q0);

    conv1_pooled_U : component bnn_xcel_conv1_pog8j
    generic map (
        DataWidth => 1,
        AddressRange => 1024,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => conv1_pooled_address0,
        ce0 => conv1_pooled_ce0,
        we0 => conv1_pooled_we0,
        d0 => grp_max_pool_16_16_s_fu_452_output_r_d0,
        q0 => conv1_pooled_q0);

    conv1_pooled_padded_U : component bnn_xcel_conv1_pohbi
    generic map (
        DataWidth => 1,
        AddressRange => 1600,
        AddressWidth => 11)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => conv1_pooled_padded_address0,
        ce0 => conv1_pooled_padded_ce0,
        we0 => conv1_pooled_padded_we0,
        d0 => conv1_pooled_padded_d0,
        q0 => conv1_pooled_padded_q0);

    conv2_U : component bnn_xcel_conv2
    generic map (
        DataWidth => 1,
        AddressRange => 2048,
        AddressWidth => 11)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => conv2_address0,
        ce0 => conv2_ce0,
        we0 => conv2_we0,
        d0 => grp_conv_16_32_10_s_fu_432_output_r_d0,
        q0 => conv2_q0);

    conv2_pooled_U : component bnn_xcel_conv2_poibs
    generic map (
        DataWidth => 1,
        AddressRange => 512,
        AddressWidth => 9)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => conv2_pooled_address0,
        ce0 => conv2_pooled_ce0,
        we0 => conv2_pooled_we0,
        d0 => grp_max_pool_32_8_s_fu_458_output_r_d0,
        q0 => conv2_pooled_q0);

    reshaped_U : component bnn_xcel_conv2_poibs
    generic map (
        DataWidth => 1,
        AddressRange => 512,
        AddressWidth => 9)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => reshaped_address0,
        ce0 => reshaped_ce0,
        we0 => reshaped_we0,
        d0 => grp_flatten_fu_470_output_r_d0,
        q0 => reshaped_q0);

    dense1_V_U : component bnn_xcel_dense1_V
    generic map (
        DataWidth => 11,
        AddressRange => 256,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => dense1_V_address0,
        ce0 => dense1_V_ce0,
        we0 => dense1_V_we0,
        d0 => dense1_V_d0,
        q0 => dense1_V_q0);

    signed1_U : component bnn_xcel_signed1
    generic map (
        DataWidth => 1,
        AddressRange => 256,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => signed1_address0,
        ce0 => signed1_ce0,
        we0 => signed1_we0,
        d0 => signed1_d0,
        q0 => signed1_q0);

    dense2_V_U : component bnn_xcel_dense2_V
    generic map (
        DataWidth => 10,
        AddressRange => 10,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => dense2_V_address0,
        ce0 => dense2_V_ce0,
        we0 => dense2_V_we0,
        d0 => dense2_V_d0,
        q0 => dense2_V_q0);

    grp_conv_16_32_10_s_fu_432 : component conv_16_32_10_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_conv_16_32_10_s_fu_432_ap_start,
        ap_done => grp_conv_16_32_10_s_fu_432_ap_done,
        ap_idle => grp_conv_16_32_10_s_fu_432_ap_idle,
        ap_ready => grp_conv_16_32_10_s_fu_432_ap_ready,
        input_r_address0 => grp_conv_16_32_10_s_fu_432_input_r_address0,
        input_r_ce0 => grp_conv_16_32_10_s_fu_432_input_r_ce0,
        input_r_q0 => conv1_pooled_padded_q0,
        output_r_address0 => grp_conv_16_32_10_s_fu_432_output_r_address0,
        output_r_ce0 => grp_conv_16_32_10_s_fu_432_output_r_ce0,
        output_r_we0 => grp_conv_16_32_10_s_fu_432_output_r_we0,
        output_r_d0 => grp_conv_16_32_10_s_fu_432_output_r_d0);

    grp_conv_1_16_18_s_fu_442 : component conv_1_16_18_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_conv_1_16_18_s_fu_442_ap_start,
        ap_done => grp_conv_1_16_18_s_fu_442_ap_done,
        ap_idle => grp_conv_1_16_18_s_fu_442_ap_idle,
        ap_ready => grp_conv_1_16_18_s_fu_442_ap_ready,
        input_0_address0 => grp_conv_1_16_18_s_fu_442_input_0_address0,
        input_0_ce0 => grp_conv_1_16_18_s_fu_442_input_0_ce0,
        input_0_q0 => input_padded_0_q0,
        output_r_address0 => grp_conv_1_16_18_s_fu_442_output_r_address0,
        output_r_ce0 => grp_conv_1_16_18_s_fu_442_output_r_ce0,
        output_r_we0 => grp_conv_1_16_18_s_fu_442_output_r_we0,
        output_r_d0 => grp_conv_1_16_18_s_fu_442_output_r_d0);

    grp_max_pool_16_16_s_fu_452 : component max_pool_16_16_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_max_pool_16_16_s_fu_452_ap_start,
        ap_done => grp_max_pool_16_16_s_fu_452_ap_done,
        ap_idle => grp_max_pool_16_16_s_fu_452_ap_idle,
        ap_ready => grp_max_pool_16_16_s_fu_452_ap_ready,
        input_r_address0 => grp_max_pool_16_16_s_fu_452_input_r_address0,
        input_r_ce0 => grp_max_pool_16_16_s_fu_452_input_r_ce0,
        input_r_q0 => conv1_q0,
        output_r_address0 => grp_max_pool_16_16_s_fu_452_output_r_address0,
        output_r_ce0 => grp_max_pool_16_16_s_fu_452_output_r_ce0,
        output_r_we0 => grp_max_pool_16_16_s_fu_452_output_r_we0,
        output_r_d0 => grp_max_pool_16_16_s_fu_452_output_r_d0);

    grp_max_pool_32_8_s_fu_458 : component max_pool_32_8_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_max_pool_32_8_s_fu_458_ap_start,
        ap_done => grp_max_pool_32_8_s_fu_458_ap_done,
        ap_idle => grp_max_pool_32_8_s_fu_458_ap_idle,
        ap_ready => grp_max_pool_32_8_s_fu_458_ap_ready,
        input_r_address0 => grp_max_pool_32_8_s_fu_458_input_r_address0,
        input_r_ce0 => grp_max_pool_32_8_s_fu_458_input_r_ce0,
        input_r_q0 => conv2_q0,
        output_r_address0 => grp_max_pool_32_8_s_fu_458_output_r_address0,
        output_r_ce0 => grp_max_pool_32_8_s_fu_458_output_r_ce0,
        output_r_we0 => grp_max_pool_32_8_s_fu_458_output_r_we0,
        output_r_d0 => grp_max_pool_32_8_s_fu_458_output_r_d0);

    grp_pad_16_8_s_fu_464 : component pad_16_8_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_pad_16_8_s_fu_464_ap_start,
        ap_done => grp_pad_16_8_s_fu_464_ap_done,
        ap_idle => grp_pad_16_8_s_fu_464_ap_idle,
        ap_ready => grp_pad_16_8_s_fu_464_ap_ready,
        input_r_address0 => grp_pad_16_8_s_fu_464_input_r_address0,
        input_r_ce0 => grp_pad_16_8_s_fu_464_input_r_ce0,
        input_r_q0 => conv1_pooled_q0,
        output_r_address0 => grp_pad_16_8_s_fu_464_output_r_address0,
        output_r_ce0 => grp_pad_16_8_s_fu_464_output_r_ce0,
        output_r_we0 => grp_pad_16_8_s_fu_464_output_r_we0,
        output_r_d0 => grp_pad_16_8_s_fu_464_output_r_d0);

    grp_flatten_fu_470 : component flatten
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_flatten_fu_470_ap_start,
        ap_done => grp_flatten_fu_470_ap_done,
        ap_idle => grp_flatten_fu_470_ap_idle,
        ap_ready => grp_flatten_fu_470_ap_ready,
        input_r_address0 => grp_flatten_fu_470_input_r_address0,
        input_r_ce0 => grp_flatten_fu_470_input_r_ce0,
        input_r_q0 => conv2_pooled_q0,
        output_r_address0 => grp_flatten_fu_470_output_r_address0,
        output_r_ce0 => grp_flatten_fu_470_output_r_ce0,
        output_r_we0 => grp_flatten_fu_470_output_r_we0,
        output_r_d0 => grp_flatten_fu_470_output_r_d0);

    grp_initialize_padded_me_fu_476 : component initialize_padded_me
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_initialize_padded_me_fu_476_ap_start,
        ap_done => grp_initialize_padded_me_fu_476_ap_done,
        ap_idle => grp_initialize_padded_me_fu_476_ap_idle,
        ap_ready => grp_initialize_padded_me_fu_476_ap_ready,
        input_r_address0 => grp_initialize_padded_me_fu_476_input_r_address0,
        input_r_ce0 => grp_initialize_padded_me_fu_476_input_r_ce0,
        input_r_we0 => grp_initialize_padded_me_fu_476_input_r_we0,
        input_r_d0 => grp_initialize_padded_me_fu_476_input_r_d0);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_return_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_preg <= ap_const_lv4_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state28) and (icmp_ln144_fu_880_p2 = ap_const_lv1_1))) then 
                    ap_return_preg <= agg_result_V_0_i_reg_398;
                end if; 
            end if;
        end if;
    end process;


    grp_conv_16_32_10_s_fu_432_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_conv_16_32_10_s_fu_432_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
                    grp_conv_16_32_10_s_fu_432_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_conv_16_32_10_s_fu_432_ap_ready = ap_const_logic_1)) then 
                    grp_conv_16_32_10_s_fu_432_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_conv_1_16_18_s_fu_442_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_conv_1_16_18_s_fu_442_ap_start_reg <= ap_const_logic_0;
            else
                if (((icmp_ln23_fu_549_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                    grp_conv_1_16_18_s_fu_442_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_conv_1_16_18_s_fu_442_ap_ready = ap_const_logic_1)) then 
                    grp_conv_1_16_18_s_fu_442_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_flatten_fu_470_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_flatten_fu_470_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
                    grp_flatten_fu_470_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_flatten_fu_470_ap_ready = ap_const_logic_1)) then 
                    grp_flatten_fu_470_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_initialize_padded_me_fu_476_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_initialize_padded_me_fu_476_ap_start_reg <= ap_const_logic_0;
            else
                if (((icmp_ln39_fu_481_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    grp_initialize_padded_me_fu_476_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_initialize_padded_me_fu_476_ap_ready = ap_const_logic_1)) then 
                    grp_initialize_padded_me_fu_476_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_max_pool_16_16_s_fu_452_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_max_pool_16_16_s_fu_452_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                    grp_max_pool_16_16_s_fu_452_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_max_pool_16_16_s_fu_452_ap_ready = ap_const_logic_1)) then 
                    grp_max_pool_16_16_s_fu_452_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_max_pool_32_8_s_fu_458_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_max_pool_32_8_s_fu_458_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
                    grp_max_pool_32_8_s_fu_458_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_max_pool_32_8_s_fu_458_ap_ready = ap_const_logic_1)) then 
                    grp_max_pool_32_8_s_fu_458_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_pad_16_8_s_fu_464_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_pad_16_8_s_fu_464_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
                    grp_pad_16_8_s_fu_464_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_pad_16_8_s_fu_464_ap_ready = ap_const_logic_1)) then 
                    grp_pad_16_8_s_fu_464_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    agg_result_V_0_i_reg_398_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
                agg_result_V_0_i_reg_398 <= select_ln145_fu_901_p3;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
                agg_result_V_0_i_reg_398 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    m_0_i14_reg_387_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln164_1_fu_762_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state24))) then 
                m_0_i14_reg_387 <= ap_const_lv9_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
                m_0_i14_reg_387 <= m_2_reg_1065;
            end if; 
        end if;
    end process;

    m_0_i7_reg_353_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state19) and (icmp_ln164_fu_642_p2 = ap_const_lv1_1))) then 
                m_0_i7_reg_353 <= ap_const_lv9_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
                m_0_i7_reg_353 <= m_reg_1024;
            end if; 
        end if;
    end process;

    m_0_i_reg_342_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln164_fu_642_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state19))) then 
                m_0_i_reg_342 <= ap_const_lv10_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
                m_0_i_reg_342 <= m_1_reg_1001;
            end if; 
        end if;
    end process;

    max_id_V_reg_420_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
                max_id_V_reg_420 <= i_fu_917_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
                max_id_V_reg_420 <= ap_const_lv4_1;
            end if; 
        end if;
    end process;

    n_0_i9_reg_364_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state22) and (icmp_ln130_fu_738_p2 = ap_const_lv1_1))) then 
                n_0_i9_reg_364 <= ap_const_lv4_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state25) and (icmp_ln166_1_fu_782_p2 = ap_const_lv1_1))) then 
                n_0_i9_reg_364 <= n_1_reg_1042;
            end if; 
        end if;
    end process;

    n_0_i_reg_319_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state20) and (icmp_ln166_fu_662_p2 = ap_const_lv1_1))) then 
                n_0_i_reg_319 <= n_reg_983;
            elsif (((grp_flatten_fu_470_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state18))) then 
                n_0_i_reg_319 <= ap_const_lv9_0;
            end if; 
        end if;
    end process;

    p_012_0_i_reg_410_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
                p_012_0_i_reg_410 <= select_ln145_1_fu_909_p3;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
                p_012_0_i_reg_410 <= max_V_fu_876_p1;
            end if; 
        end if;
    end process;

    p_04_0_i13_reg_375_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln164_1_fu_762_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state24))) then 
                p_04_0_i13_reg_375 <= ap_const_lv9_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
                p_04_0_i13_reg_375 <= accum_V_2_fu_870_p2;
            end if; 
        end if;
    end process;

    p_04_0_i_reg_330_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln164_fu_642_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state19))) then 
                p_04_0_i_reg_330 <= ap_const_lv10_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
                p_04_0_i_reg_330 <= accum_V_fu_732_p2;
            end if; 
        end if;
    end process;

    x_0_0_i1_reg_297_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln24_fu_569_p2 = ap_const_lv1_1))) then 
                x_0_0_i1_reg_297 <= add_ln25_reg_947;
            elsif (((grp_initialize_padded_me_fu_476_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                x_0_0_i1_reg_297 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    x_0_0_i_reg_275_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln40_fu_523_p2 = ap_const_lv1_1))) then 
                x_0_0_i_reg_275 <= add_ln39_reg_926;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                x_0_0_i_reg_275 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    y_0_0_i3_reg_308_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln23_fu_549_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                y_0_0_i3_reg_308 <= ap_const_lv5_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                y_0_0_i3_reg_308 <= add_ln25_1_reg_965;
            end if; 
        end if;
    end process;

    y_0_0_i_reg_286_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln39_fu_481_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                y_0_0_i_reg_286 <= ap_const_lv5_0;
            elsif (((icmp_ln40_fu_523_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                y_0_0_i_reg_286 <= add_ln40_fu_529_p2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln24_fu_569_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                add_ln25_10_reg_975 <= add_ln25_10_fu_633_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                add_ln25_1_reg_965 <= add_ln25_1_fu_575_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                add_ln25_reg_947 <= add_ln25_fu_555_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                add_ln39_reg_926 <= add_ln39_fu_487_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln39_fu_481_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    add_ln41_reg_931(9 downto 1) <= add_ln41_fu_517_p2(9 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state20)) then
                m_1_reg_1001 <= m_1_fu_668_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state25)) then
                m_2_reg_1065 <= m_2_fu_788_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state22)) then
                m_reg_1024 <= m_fu_744_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state24)) then
                n_1_reg_1042 <= n_1_fu_768_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state19)) then
                n_reg_983 <= n_fu_648_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln130_fu_738_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state22))) then
                    zext_ln131_reg_1029(8 downto 0) <= zext_ln131_fu_750_p1(8 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln164_1_fu_762_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state24))) then
                    zext_ln166_1_reg_1052(3 downto 0) <= zext_ln166_1_fu_778_p1(3 downto 0);
                    zext_ln168_2_reg_1047(3 downto 0) <= zext_ln168_2_fu_774_p1(3 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln164_fu_642_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state19))) then
                    zext_ln166_reg_993(8 downto 0) <= zext_ln166_fu_658_p1(8 downto 0);
                    zext_ln168_reg_988(8 downto 0) <= zext_ln168_fu_654_p1(8 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln23_fu_549_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    zext_ln24_reg_957(4 downto 0) <= zext_ln24_fu_565_p1(4 downto 0);
                    zext_ln25_reg_952(4 downto 0) <= zext_ln25_fu_561_p1(4 downto 0);
            end if;
        end if;
    end process;
    add_ln41_reg_931(0) <= '0';
    zext_ln25_reg_952(9 downto 5) <= "00000";
    zext_ln24_reg_957(9 downto 5) <= "00000";
    zext_ln168_reg_988(63 downto 9) <= "0000000000000000000000000000000000000000000000000000000";
    zext_ln166_reg_993(18 downto 9) <= "0000000000";
    zext_ln131_reg_1029(63 downto 9) <= "0000000000000000000000000000000000000000000000000000000";
    zext_ln168_2_reg_1047(63 downto 4) <= "000000000000000000000000000000000000000000000000000000000000";
    zext_ln166_1_reg_1052(12 downto 4) <= "000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln39_fu_481_p2, ap_CS_fsm_state3, ap_CS_fsm_state5, icmp_ln23_fu_549_p2, ap_CS_fsm_state6, icmp_ln24_fu_569_p2, ap_CS_fsm_state19, icmp_ln164_fu_642_p2, ap_CS_fsm_state20, icmp_ln166_fu_662_p2, ap_CS_fsm_state22, icmp_ln130_fu_738_p2, ap_CS_fsm_state24, icmp_ln164_1_fu_762_p2, ap_CS_fsm_state25, icmp_ln166_1_fu_782_p2, ap_CS_fsm_state28, icmp_ln144_fu_880_p2, grp_conv_16_32_10_s_fu_432_ap_done, grp_conv_1_16_18_s_fu_442_ap_done, grp_max_pool_16_16_s_fu_452_ap_done, grp_max_pool_32_8_s_fu_458_ap_done, grp_pad_16_8_s_fu_464_ap_done, grp_flatten_fu_470_ap_done, grp_initialize_padded_me_fu_476_ap_done, icmp_ln40_fu_523_p2, ap_CS_fsm_state4, ap_CS_fsm_state18, ap_CS_fsm_state14, ap_CS_fsm_state8, ap_CS_fsm_state10, ap_CS_fsm_state16, ap_CS_fsm_state12)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln39_fu_481_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln40_fu_523_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state4 => 
                if (((grp_initialize_padded_me_fu_476_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state5 => 
                if (((icmp_ln23_fu_549_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state6 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln24_fu_569_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state8 => 
                if (((grp_conv_1_16_18_s_fu_442_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                if (((grp_max_pool_16_16_s_fu_452_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state10))) then
                    ap_NS_fsm <= ap_ST_fsm_state11;
                else
                    ap_NS_fsm <= ap_ST_fsm_state10;
                end if;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                if (((grp_pad_16_8_s_fu_464_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state12))) then
                    ap_NS_fsm <= ap_ST_fsm_state13;
                else
                    ap_NS_fsm <= ap_ST_fsm_state12;
                end if;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                if (((grp_conv_16_32_10_s_fu_432_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state14))) then
                    ap_NS_fsm <= ap_ST_fsm_state15;
                else
                    ap_NS_fsm <= ap_ST_fsm_state14;
                end if;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                if (((grp_max_pool_32_8_s_fu_458_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state16))) then
                    ap_NS_fsm <= ap_ST_fsm_state17;
                else
                    ap_NS_fsm <= ap_ST_fsm_state16;
                end if;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                if (((grp_flatten_fu_470_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state18))) then
                    ap_NS_fsm <= ap_ST_fsm_state19;
                else
                    ap_NS_fsm <= ap_ST_fsm_state18;
                end if;
            when ap_ST_fsm_state19 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state19) and (icmp_ln164_fu_642_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state22;
                else
                    ap_NS_fsm <= ap_ST_fsm_state20;
                end if;
            when ap_ST_fsm_state20 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state20) and (icmp_ln166_fu_662_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state19;
                else
                    ap_NS_fsm <= ap_ST_fsm_state21;
                end if;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state22 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state22) and (icmp_ln130_fu_738_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state24;
                else
                    ap_NS_fsm <= ap_ST_fsm_state23;
                end if;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state24 => 
                if (((icmp_ln164_1_fu_762_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state24))) then
                    ap_NS_fsm <= ap_ST_fsm_state25;
                else
                    ap_NS_fsm <= ap_ST_fsm_state27;
                end if;
            when ap_ST_fsm_state25 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state25) and (icmp_ln166_1_fu_782_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state24;
                else
                    ap_NS_fsm <= ap_ST_fsm_state26;
                end if;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state28) and (icmp_ln144_fu_880_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state29;
                end if;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    accum_V_2_fu_870_p2 <= std_logic_vector(unsigned(p_04_0_i13_reg_375) + unsigned(zext_ln700_1_fu_866_p1));
    accum_V_fu_732_p2 <= std_logic_vector(unsigned(zext_ln700_fu_728_p1) + unsigned(p_04_0_i_reg_330));
    add_ln168_1_fu_823_p2 <= std_logic_vector(unsigned(zext_ln168_7_fu_819_p1) + unsigned(zext_ln168_6_fu_807_p1));
    add_ln168_2_fu_829_p2 <= std_logic_vector(unsigned(add_ln168_1_fu_823_p2) + unsigned(zext_ln166_1_reg_1052));
    add_ln168_fu_691_p2 <= std_logic_vector(unsigned(zext_ln166_reg_993) + unsigned(zext_ln168_4_fu_687_p1));
    add_ln25_10_fu_633_p2 <= std_logic_vector(unsigned(add_ln25_9_fu_627_p2) + unsigned(zext_ln24_reg_957));
    add_ln25_1_fu_575_p2 <= std_logic_vector(unsigned(y_0_0_i3_reg_308) + unsigned(ap_const_lv5_1));
    add_ln25_8_fu_593_p2 <= std_logic_vector(unsigned(zext_ln25_7_fu_589_p1) + unsigned(zext_ln25_reg_952));
    add_ln25_9_fu_627_p2 <= std_logic_vector(unsigned(zext_ln25_10_fu_623_p1) + unsigned(zext_ln25_9_fu_611_p1));
    add_ln25_fu_555_p2 <= std_logic_vector(unsigned(x_0_0_i1_reg_297) + unsigned(ap_const_lv5_1));
    add_ln39_fu_487_p2 <= std_logic_vector(unsigned(x_0_0_i_reg_275) + unsigned(ap_const_lv5_1));
    add_ln40_fu_529_p2 <= std_logic_vector(unsigned(y_0_0_i_reg_286) + unsigned(ap_const_lv5_1));
    add_ln41_4_fu_539_p2 <= std_logic_vector(unsigned(add_ln41_reg_931) + unsigned(zext_ln41_7_fu_535_p1));
    add_ln41_fu_517_p2 <= std_logic_vector(unsigned(zext_ln41_6_fu_513_p1) + unsigned(zext_ln41_fu_501_p1));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state19 <= ap_CS_fsm(18);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(19);
    ap_CS_fsm_state21 <= ap_CS_fsm(20);
    ap_CS_fsm_state22 <= ap_CS_fsm(21);
    ap_CS_fsm_state23 <= ap_CS_fsm(22);
    ap_CS_fsm_state24 <= ap_CS_fsm(23);
    ap_CS_fsm_state25 <= ap_CS_fsm(24);
    ap_CS_fsm_state26 <= ap_CS_fsm(25);
    ap_CS_fsm_state27 <= ap_CS_fsm(26);
    ap_CS_fsm_state28 <= ap_CS_fsm(27);
    ap_CS_fsm_state29 <= ap_CS_fsm(28);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state28, icmp_ln144_fu_880_p2)
    begin
        if ((((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((ap_const_logic_1 = ap_CS_fsm_state28) and (icmp_ln144_fu_880_p2 = ap_const_lv1_1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state28, icmp_ln144_fu_880_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state28) and (icmp_ln144_fu_880_p2 = ap_const_lv1_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_return_assign_proc : process(ap_CS_fsm_state28, icmp_ln144_fu_880_p2, agg_result_V_0_i_reg_398, ap_return_preg)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state28) and (icmp_ln144_fu_880_p2 = ap_const_lv1_1))) then 
            ap_return <= agg_result_V_0_i_reg_398;
        else 
            ap_return <= ap_return_preg;
        end if; 
    end process;


    conv1_address0_assign_proc : process(grp_conv_1_16_18_s_fu_442_output_r_address0, grp_max_pool_16_16_s_fu_452_input_r_address0, ap_CS_fsm_state8, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            conv1_address0 <= grp_max_pool_16_16_s_fu_452_input_r_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            conv1_address0 <= grp_conv_1_16_18_s_fu_442_output_r_address0;
        else 
            conv1_address0 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    conv1_ce0_assign_proc : process(grp_conv_1_16_18_s_fu_442_output_r_ce0, grp_max_pool_16_16_s_fu_452_input_r_ce0, ap_CS_fsm_state8, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            conv1_ce0 <= grp_max_pool_16_16_s_fu_452_input_r_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            conv1_ce0 <= grp_conv_1_16_18_s_fu_442_output_r_ce0;
        else 
            conv1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    conv1_pooled_address0_assign_proc : process(grp_max_pool_16_16_s_fu_452_output_r_address0, grp_pad_16_8_s_fu_464_input_r_address0, ap_CS_fsm_state10, ap_CS_fsm_state12)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            conv1_pooled_address0 <= grp_pad_16_8_s_fu_464_input_r_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            conv1_pooled_address0 <= grp_max_pool_16_16_s_fu_452_output_r_address0;
        else 
            conv1_pooled_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    conv1_pooled_ce0_assign_proc : process(grp_max_pool_16_16_s_fu_452_output_r_ce0, grp_pad_16_8_s_fu_464_input_r_ce0, ap_CS_fsm_state10, ap_CS_fsm_state12)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            conv1_pooled_ce0 <= grp_pad_16_8_s_fu_464_input_r_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            conv1_pooled_ce0 <= grp_max_pool_16_16_s_fu_452_output_r_ce0;
        else 
            conv1_pooled_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    conv1_pooled_padded_address0_assign_proc : process(grp_conv_16_32_10_s_fu_432_input_r_address0, grp_pad_16_8_s_fu_464_output_r_address0, grp_initialize_padded_me_fu_476_input_r_address0, ap_CS_fsm_state4, ap_CS_fsm_state14, ap_CS_fsm_state12)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            conv1_pooled_padded_address0 <= grp_initialize_padded_me_fu_476_input_r_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            conv1_pooled_padded_address0 <= grp_pad_16_8_s_fu_464_output_r_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            conv1_pooled_padded_address0 <= grp_conv_16_32_10_s_fu_432_input_r_address0;
        else 
            conv1_pooled_padded_address0 <= "XXXXXXXXXXX";
        end if; 
    end process;


    conv1_pooled_padded_ce0_assign_proc : process(grp_conv_16_32_10_s_fu_432_input_r_ce0, grp_pad_16_8_s_fu_464_output_r_ce0, grp_initialize_padded_me_fu_476_input_r_ce0, ap_CS_fsm_state4, ap_CS_fsm_state14, ap_CS_fsm_state12)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            conv1_pooled_padded_ce0 <= grp_initialize_padded_me_fu_476_input_r_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            conv1_pooled_padded_ce0 <= grp_pad_16_8_s_fu_464_output_r_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            conv1_pooled_padded_ce0 <= grp_conv_16_32_10_s_fu_432_input_r_ce0;
        else 
            conv1_pooled_padded_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    conv1_pooled_padded_d0_assign_proc : process(grp_pad_16_8_s_fu_464_output_r_d0, grp_initialize_padded_me_fu_476_input_r_d0, ap_CS_fsm_state4, ap_CS_fsm_state12)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            conv1_pooled_padded_d0 <= grp_initialize_padded_me_fu_476_input_r_d0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            conv1_pooled_padded_d0 <= grp_pad_16_8_s_fu_464_output_r_d0;
        else 
            conv1_pooled_padded_d0 <= "X";
        end if; 
    end process;


    conv1_pooled_padded_we0_assign_proc : process(grp_pad_16_8_s_fu_464_output_r_we0, grp_initialize_padded_me_fu_476_input_r_we0, ap_CS_fsm_state4, ap_CS_fsm_state12)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            conv1_pooled_padded_we0 <= grp_initialize_padded_me_fu_476_input_r_we0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            conv1_pooled_padded_we0 <= grp_pad_16_8_s_fu_464_output_r_we0;
        else 
            conv1_pooled_padded_we0 <= ap_const_logic_0;
        end if; 
    end process;


    conv1_pooled_we0_assign_proc : process(grp_max_pool_16_16_s_fu_452_output_r_we0, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            conv1_pooled_we0 <= grp_max_pool_16_16_s_fu_452_output_r_we0;
        else 
            conv1_pooled_we0 <= ap_const_logic_0;
        end if; 
    end process;


    conv1_we0_assign_proc : process(grp_conv_1_16_18_s_fu_442_output_r_we0, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            conv1_we0 <= grp_conv_1_16_18_s_fu_442_output_r_we0;
        else 
            conv1_we0 <= ap_const_logic_0;
        end if; 
    end process;


    conv2_address0_assign_proc : process(grp_conv_16_32_10_s_fu_432_output_r_address0, grp_max_pool_32_8_s_fu_458_input_r_address0, ap_CS_fsm_state14, ap_CS_fsm_state16)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            conv2_address0 <= grp_max_pool_32_8_s_fu_458_input_r_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            conv2_address0 <= grp_conv_16_32_10_s_fu_432_output_r_address0;
        else 
            conv2_address0 <= "XXXXXXXXXXX";
        end if; 
    end process;


    conv2_ce0_assign_proc : process(grp_conv_16_32_10_s_fu_432_output_r_ce0, grp_max_pool_32_8_s_fu_458_input_r_ce0, ap_CS_fsm_state14, ap_CS_fsm_state16)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            conv2_ce0 <= grp_max_pool_32_8_s_fu_458_input_r_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            conv2_ce0 <= grp_conv_16_32_10_s_fu_432_output_r_ce0;
        else 
            conv2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    conv2_pooled_address0_assign_proc : process(grp_max_pool_32_8_s_fu_458_output_r_address0, grp_flatten_fu_470_input_r_address0, ap_CS_fsm_state18, ap_CS_fsm_state16)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            conv2_pooled_address0 <= grp_flatten_fu_470_input_r_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            conv2_pooled_address0 <= grp_max_pool_32_8_s_fu_458_output_r_address0;
        else 
            conv2_pooled_address0 <= "XXXXXXXXX";
        end if; 
    end process;


    conv2_pooled_ce0_assign_proc : process(grp_max_pool_32_8_s_fu_458_output_r_ce0, grp_flatten_fu_470_input_r_ce0, ap_CS_fsm_state18, ap_CS_fsm_state16)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            conv2_pooled_ce0 <= grp_flatten_fu_470_input_r_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            conv2_pooled_ce0 <= grp_max_pool_32_8_s_fu_458_output_r_ce0;
        else 
            conv2_pooled_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    conv2_pooled_we0_assign_proc : process(grp_max_pool_32_8_s_fu_458_output_r_we0, ap_CS_fsm_state16)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            conv2_pooled_we0 <= grp_max_pool_32_8_s_fu_458_output_r_we0;
        else 
            conv2_pooled_we0 <= ap_const_logic_0;
        end if; 
    end process;


    conv2_we0_assign_proc : process(grp_conv_16_32_10_s_fu_432_output_r_we0, ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            conv2_we0 <= grp_conv_16_32_10_s_fu_432_output_r_we0;
        else 
            conv2_we0 <= ap_const_logic_0;
        end if; 
    end process;


    dense1_V_address0_assign_proc : process(zext_ln168_reg_988, ap_CS_fsm_state20, ap_CS_fsm_state22, zext_ln131_fu_750_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            dense1_V_address0 <= zext_ln131_fu_750_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            dense1_V_address0 <= zext_ln168_reg_988(8 - 1 downto 0);
        else 
            dense1_V_address0 <= "XXXXXXXX";
        end if; 
    end process;


    dense1_V_ce0_assign_proc : process(ap_CS_fsm_state20, ap_CS_fsm_state22)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state20))) then 
            dense1_V_ce0 <= ap_const_logic_1;
        else 
            dense1_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    dense1_V_d0 <= std_logic_vector(unsigned(shl_ln_fu_701_p3) + unsigned(ap_const_lv11_600));

    dense1_V_we0_assign_proc : process(ap_CS_fsm_state20, icmp_ln166_fu_662_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state20) and (icmp_ln166_fu_662_p2 = ap_const_lv1_1))) then 
            dense1_V_we0 <= ap_const_logic_1;
        else 
            dense1_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    dense2_V_address0_assign_proc : process(ap_CS_fsm_state24, zext_ln168_2_reg_1047, ap_CS_fsm_state25, ap_CS_fsm_state28, zext_ln145_fu_886_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            dense2_V_address0 <= zext_ln145_fu_886_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            dense2_V_address0 <= zext_ln168_2_reg_1047(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            dense2_V_address0 <= ap_const_lv64_0(4 - 1 downto 0);
        else 
            dense2_V_address0 <= "XXXX";
        end if; 
    end process;


    dense2_V_ce0_assign_proc : process(ap_CS_fsm_state24, ap_CS_fsm_state25, ap_CS_fsm_state28)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state24))) then 
            dense2_V_ce0 <= ap_const_logic_1;
        else 
            dense2_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    dense2_V_d0 <= std_logic_vector(unsigned(shl_ln1503_1_fu_839_p3) + unsigned(ap_const_lv10_300));

    dense2_V_we0_assign_proc : process(ap_CS_fsm_state25, icmp_ln166_1_fu_782_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state25) and (icmp_ln166_1_fu_782_p2 = ap_const_lv1_1))) then 
            dense2_V_we0 <= ap_const_logic_1;
        else 
            dense2_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    grp_conv_16_32_10_s_fu_432_ap_start <= grp_conv_16_32_10_s_fu_432_ap_start_reg;
    grp_conv_1_16_18_s_fu_442_ap_start <= grp_conv_1_16_18_s_fu_442_ap_start_reg;
    grp_flatten_fu_470_ap_start <= grp_flatten_fu_470_ap_start_reg;
    grp_initialize_padded_me_fu_476_ap_start <= grp_initialize_padded_me_fu_476_ap_start_reg;
    grp_max_pool_16_16_s_fu_452_ap_start <= grp_max_pool_16_16_s_fu_452_ap_start_reg;
    grp_max_pool_32_8_s_fu_458_ap_start <= grp_max_pool_32_8_s_fu_458_ap_start_reg;
    grp_pad_16_8_s_fu_464_ap_start <= grp_pad_16_8_s_fu_464_ap_start_reg;
    i_fu_917_p2 <= std_logic_vector(unsigned(max_id_V_reg_420) + unsigned(ap_const_lv4_1));
    icmp_ln130_fu_738_p2 <= "1" when (m_0_i7_reg_353 = ap_const_lv9_100) else "0";
    icmp_ln144_fu_880_p2 <= "1" when (max_id_V_reg_420 = ap_const_lv4_A) else "0";
    icmp_ln164_1_fu_762_p2 <= "1" when (n_0_i9_reg_364 = ap_const_lv4_A) else "0";
    icmp_ln164_fu_642_p2 <= "1" when (n_0_i_reg_319 = ap_const_lv9_100) else "0";
    icmp_ln166_1_fu_782_p2 <= "1" when (m_0_i14_reg_387 = ap_const_lv9_100) else "0";
    icmp_ln166_fu_662_p2 <= "1" when (m_0_i_reg_342 = ap_const_lv10_200) else "0";
    icmp_ln23_fu_549_p2 <= "1" when (x_0_0_i1_reg_297 = ap_const_lv5_10) else "0";
    icmp_ln24_fu_569_p2 <= "1" when (y_0_0_i3_reg_308 = ap_const_lv5_10) else "0";
    icmp_ln39_fu_481_p2 <= "1" when (x_0_0_i_reg_275 = ap_const_lv5_12) else "0";
    icmp_ln40_fu_523_p2 <= "1" when (y_0_0_i_reg_286 = ap_const_lv5_12) else "0";
    icmp_ln895_1_fu_895_p2 <= "1" when (signed(max_V_1_fu_891_p1) > signed(p_012_0_i_reg_410)) else "0";
    input_0_address0 <= zext_ln25_8_fu_598_p1(8 - 1 downto 0);

    input_0_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            input_0_ce0 <= ap_const_logic_1;
        else 
            input_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    input_padded_0_address0_assign_proc : process(ap_CS_fsm_state3, grp_conv_1_16_18_s_fu_442_input_0_address0, ap_CS_fsm_state7, ap_CS_fsm_state8, zext_ln41_8_fu_544_p1, zext_ln25_11_fu_638_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            input_padded_0_address0 <= zext_ln25_11_fu_638_p1(9 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            input_padded_0_address0 <= zext_ln41_8_fu_544_p1(9 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            input_padded_0_address0 <= grp_conv_1_16_18_s_fu_442_input_0_address0;
        else 
            input_padded_0_address0 <= "XXXXXXXXX";
        end if; 
    end process;


    input_padded_0_ce0_assign_proc : process(ap_CS_fsm_state3, grp_conv_1_16_18_s_fu_442_input_0_ce0, ap_CS_fsm_state7, ap_CS_fsm_state8)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            input_padded_0_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            input_padded_0_ce0 <= grp_conv_1_16_18_s_fu_442_input_0_ce0;
        else 
            input_padded_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    input_padded_0_d0_assign_proc : process(input_0_q0, ap_CS_fsm_state3, ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            input_padded_0_d0 <= input_0_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            input_padded_0_d0 <= ap_const_lv1_1;
        else 
            input_padded_0_d0 <= "X";
        end if; 
    end process;


    input_padded_0_we0_assign_proc : process(ap_CS_fsm_state3, icmp_ln40_fu_523_p2, ap_CS_fsm_state7)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) or ((icmp_ln40_fu_523_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3)))) then 
            input_padded_0_we0 <= ap_const_logic_1;
        else 
            input_padded_0_we0 <= ap_const_logic_0;
        end if; 
    end process;

    m_1_fu_668_p2 <= std_logic_vector(unsigned(m_0_i_reg_342) + unsigned(ap_const_lv10_1));
    m_2_fu_788_p2 <= std_logic_vector(unsigned(m_0_i14_reg_387) + unsigned(ap_const_lv9_1));
    m_fu_744_p2 <= std_logic_vector(unsigned(m_0_i7_reg_353) + unsigned(ap_const_lv9_1));
        max_V_1_fu_891_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(dense2_V_q0),16));

        max_V_fu_876_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(dense2_V_q0),16));

    n_1_fu_768_p2 <= std_logic_vector(unsigned(n_0_i9_reg_364) + unsigned(ap_const_lv4_1));
    n_fu_648_p2 <= std_logic_vector(unsigned(n_0_i_reg_319) + unsigned(ap_const_lv9_1));

    reshaped_address0_assign_proc : process(ap_CS_fsm_state20, grp_flatten_fu_470_output_r_address0, ap_CS_fsm_state18, zext_ln168_1_fu_674_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            reshaped_address0 <= zext_ln168_1_fu_674_p1(9 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            reshaped_address0 <= grp_flatten_fu_470_output_r_address0;
        else 
            reshaped_address0 <= "XXXXXXXXX";
        end if; 
    end process;


    reshaped_ce0_assign_proc : process(ap_CS_fsm_state20, grp_flatten_fu_470_output_r_ce0, ap_CS_fsm_state18)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            reshaped_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            reshaped_ce0 <= grp_flatten_fu_470_output_r_ce0;
        else 
            reshaped_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    reshaped_we0_assign_proc : process(grp_flatten_fu_470_output_r_we0, ap_CS_fsm_state18)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            reshaped_we0 <= grp_flatten_fu_470_output_r_we0;
        else 
            reshaped_we0 <= ap_const_logic_0;
        end if; 
    end process;

    select_ln145_1_fu_909_p3 <= 
        max_V_1_fu_891_p1 when (icmp_ln895_1_fu_895_p2(0) = '1') else 
        p_012_0_i_reg_410;
    select_ln145_fu_901_p3 <= 
        max_id_V_reg_420 when (icmp_ln895_1_fu_895_p2(0) = '1') else 
        agg_result_V_0_i_reg_398;
    shl_ln1503_1_fu_839_p3 <= (p_04_0_i13_reg_375 & ap_const_lv1_0);
    shl_ln_fu_701_p3 <= (p_04_0_i_reg_330 & ap_const_lv1_0);

    signed1_address0_assign_proc : process(zext_ln131_reg_1029, ap_CS_fsm_state25, ap_CS_fsm_state23, zext_ln168_3_fu_794_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            signed1_address0 <= zext_ln168_3_fu_794_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            signed1_address0 <= zext_ln131_reg_1029(8 - 1 downto 0);
        else 
            signed1_address0 <= "XXXXXXXX";
        end if; 
    end process;


    signed1_ce0_assign_proc : process(ap_CS_fsm_state25, ap_CS_fsm_state23)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state25))) then 
            signed1_ce0 <= ap_const_logic_1;
        else 
            signed1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    signed1_d0 <= "1" when (signed(dense1_V_q0) > signed(ap_const_lv11_0)) else "0";

    signed1_we0_assign_proc : process(ap_CS_fsm_state23)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            signed1_we0 <= ap_const_logic_1;
        else 
            signed1_we0 <= ap_const_logic_0;
        end if; 
    end process;

    tmp_10_fu_811_p3 <= (m_0_i14_reg_387 & ap_const_lv1_0);
    tmp_5_fu_581_p3 <= (y_0_0_i3_reg_308 & ap_const_lv4_0);
    tmp_6_fu_603_p3 <= (add_ln25_1_fu_575_p2 & ap_const_lv4_0);
    tmp_7_fu_615_p3 <= (add_ln25_1_fu_575_p2 & ap_const_lv1_0);
    tmp_8_fu_679_p3 <= (m_0_i_reg_342 & ap_const_lv8_0);
    tmp_9_fu_799_p3 <= (m_0_i14_reg_387 & ap_const_lv3_0);
    tmp_fu_493_p3 <= (x_0_0_i_reg_275 & ap_const_lv4_0);
    tmp_s_fu_505_p3 <= (x_0_0_i_reg_275 & ap_const_lv1_0);
    w_fc1_address0 <= zext_ln168_5_fu_696_p1(17 - 1 downto 0);

    w_fc1_ce0_assign_proc : process(ap_CS_fsm_state20)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            w_fc1_ce0 <= ap_const_logic_1;
        else 
            w_fc1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    w_fc2_address0 <= zext_ln168_8_fu_834_p1(12 - 1 downto 0);

    w_fc2_ce0_assign_proc : process(ap_CS_fsm_state25)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            w_fc2_ce0 <= ap_const_logic_1;
        else 
            w_fc2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    xor_ln168_1_fu_722_p2 <= (xor_ln168_fu_716_p2 xor reshaped_q0);
    xor_ln168_2_fu_854_p2 <= (w_fc2_q0 xor ap_const_lv1_1);
    xor_ln168_3_fu_860_p2 <= (xor_ln168_2_fu_854_p2 xor signed1_q0);
    xor_ln168_fu_716_p2 <= (w_fc1_q0 xor ap_const_lv1_1);
    zext_ln131_fu_750_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(m_0_i7_reg_353),64));
    zext_ln145_fu_886_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(max_id_V_reg_420),64));
    zext_ln166_1_fu_778_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(n_0_i9_reg_364),13));
    zext_ln166_fu_658_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(n_0_i_reg_319),19));
    zext_ln168_1_fu_674_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(m_0_i_reg_342),64));
    zext_ln168_2_fu_774_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(n_0_i9_reg_364),64));
    zext_ln168_3_fu_794_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(m_0_i14_reg_387),64));
    zext_ln168_4_fu_687_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_8_fu_679_p3),19));
    zext_ln168_5_fu_696_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln168_fu_691_p2),64));
    zext_ln168_6_fu_807_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_9_fu_799_p3),13));
    zext_ln168_7_fu_819_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_10_fu_811_p3),13));
    zext_ln168_8_fu_834_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln168_2_fu_829_p2),64));
    zext_ln168_fu_654_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(n_0_i_reg_319),64));
    zext_ln24_fu_565_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln25_fu_555_p2),10));
    zext_ln25_10_fu_623_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_7_fu_615_p3),10));
    zext_ln25_11_fu_638_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln25_10_reg_975),64));
    zext_ln25_7_fu_589_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_5_fu_581_p3),10));
    zext_ln25_8_fu_598_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln25_8_fu_593_p2),64));
    zext_ln25_9_fu_611_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_6_fu_603_p3),10));
    zext_ln25_fu_561_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(x_0_0_i1_reg_297),10));
    zext_ln41_6_fu_513_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_s_fu_505_p3),10));
    zext_ln41_7_fu_535_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(y_0_0_i_reg_286),10));
    zext_ln41_8_fu_544_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln41_4_fu_539_p2),64));
    zext_ln41_fu_501_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_fu_493_p3),10));
    zext_ln700_1_fu_866_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(xor_ln168_3_fu_860_p2),9));
    zext_ln700_fu_728_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(xor_ln168_1_fu_722_p2),10));
end behav;
