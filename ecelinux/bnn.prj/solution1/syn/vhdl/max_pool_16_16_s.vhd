-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity max_pool_16_16_s is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    input_r_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    input_r_ce0 : OUT STD_LOGIC;
    input_r_q0 : IN STD_LOGIC_VECTOR (0 downto 0);
    output_r_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    output_r_ce0 : OUT STD_LOGIC;
    output_r_we0 : OUT STD_LOGIC;
    output_r_d0 : OUT STD_LOGIC_VECTOR (0 downto 0) );
end;


architecture behav of max_pool_16_16_s is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (6 downto 0) := "0000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (6 downto 0) := "0000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (6 downto 0) := "0001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (6 downto 0) := "0010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (6 downto 0) := "0100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (6 downto 0) := "1000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv5_10 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal m_fu_156_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal m_reg_306 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal zext_ln90_fu_170_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln90_reg_311 : STD_LOGIC_VECTOR (8 downto 0);
    signal icmp_ln89_fu_150_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal x_fu_180_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal x_reg_319 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal shl_ln95_fu_186_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal shl_ln95_reg_324 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln90_fu_174_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln91_fu_192_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln91_reg_329 : STD_LOGIC_VECTOR (11 downto 0);
    signal y_fu_202_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal y_reg_337 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal shl_ln95_2_fu_208_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal shl_ln95_2_reg_342 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln91_fu_196_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal c_fu_224_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal c_reg_350 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal add_ln95_fu_230_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln95_reg_355 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln93_fu_218_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal r_fu_272_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal r_reg_363 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal icmp_ln94_fu_266_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln95_fu_297_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal m_0_reg_68 : STD_LOGIC_VECTOR (4 downto 0);
    signal x_0_reg_80 : STD_LOGIC_VECTOR (3 downto 0);
    signal y_0_reg_91 : STD_LOGIC_VECTOR (3 downto 0);
    signal max_0_reg_103 : STD_LOGIC_VECTOR (0 downto 0);
    signal c_0_reg_116 : STD_LOGIC_VECTOR (1 downto 0);
    signal max_1_reg_127 : STD_LOGIC_VECTOR (0 downto 0);
    signal r_0_reg_139 : STD_LOGIC_VECTOR (1 downto 0);
    signal zext_ln99_2_fu_257_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln95_fu_292_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_fu_162_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln93_fu_214_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln99_fu_235_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln99_fu_239_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_15_cast_fu_244_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln99_2_fu_252_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln94_fu_262_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln95_2_fu_278_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_s_fu_283_p4 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (6 downto 0);


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    c_0_reg_116_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln94_fu_266_p2 = ap_const_lv1_1))) then 
                c_0_reg_116 <= c_reg_350;
            elsif (((icmp_ln91_fu_196_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                c_0_reg_116 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    m_0_reg_68_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln90_fu_174_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                m_0_reg_68 <= m_reg_306;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                m_0_reg_68 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    max_0_reg_103_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln94_fu_266_p2 = ap_const_lv1_1))) then 
                max_0_reg_103 <= max_1_reg_127;
            elsif (((icmp_ln91_fu_196_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                max_0_reg_103 <= ap_const_lv1_0;
            end if; 
        end if;
    end process;

    max_1_reg_127_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln93_fu_218_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                max_1_reg_127 <= max_0_reg_103;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                max_1_reg_127 <= or_ln95_fu_297_p2;
            end if; 
        end if;
    end process;

    r_0_reg_139_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln93_fu_218_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                r_0_reg_139 <= ap_const_lv2_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                r_0_reg_139 <= r_reg_363;
            end if; 
        end if;
    end process;

    x_0_reg_80_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln91_fu_196_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                x_0_reg_80 <= x_reg_319;
            elsif (((icmp_ln89_fu_150_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                x_0_reg_80 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    y_0_reg_91_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln90_fu_174_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                y_0_reg_91 <= ap_const_lv4_0;
            elsif (((icmp_ln93_fu_218_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                y_0_reg_91 <= y_reg_337;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln93_fu_218_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                add_ln95_reg_355 <= add_ln95_fu_230_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                c_reg_350 <= c_fu_224_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                m_reg_306 <= m_fu_156_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                r_reg_363 <= r_fu_272_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln91_fu_196_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    shl_ln95_2_reg_342(3 downto 1) <= shl_ln95_2_fu_208_p2(3 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln90_fu_174_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    shl_ln95_reg_324(3 downto 1) <= shl_ln95_fu_186_p2(3 downto 1);
                    zext_ln91_reg_329(3 downto 0) <= zext_ln91_fu_192_p1(3 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                x_reg_319 <= x_fu_180_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                y_reg_337 <= y_fu_202_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln89_fu_150_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    zext_ln90_reg_311(7 downto 3) <= zext_ln90_fu_170_p1(7 downto 3);
            end if;
        end if;
    end process;
    zext_ln90_reg_311(2 downto 0) <= "000";
    zext_ln90_reg_311(8) <= '0';
    shl_ln95_reg_324(0) <= '0';
    zext_ln91_reg_329(11 downto 4) <= "00000000";
    shl_ln95_2_reg_342(0) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln89_fu_150_p2, ap_CS_fsm_state3, icmp_ln90_fu_174_p2, ap_CS_fsm_state4, icmp_ln91_fu_196_p2, ap_CS_fsm_state5, icmp_ln93_fu_218_p2, ap_CS_fsm_state6, icmp_ln94_fu_266_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln89_fu_150_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((icmp_ln90_fu_174_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                if (((icmp_ln91_fu_196_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                if (((icmp_ln93_fu_218_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state6 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln94_fu_266_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when others =>  
                ap_NS_fsm <= "XXXXXXX";
        end case;
    end process;
    add_ln95_2_fu_278_p2 <= std_logic_vector(unsigned(shl_ln95_2_reg_342) + unsigned(zext_ln94_fu_262_p1));
    add_ln95_fu_230_p2 <= std_logic_vector(unsigned(shl_ln95_reg_324) + unsigned(zext_ln93_fu_214_p1));
    add_ln99_2_fu_252_p2 <= std_logic_vector(unsigned(zext_ln91_reg_329) + unsigned(tmp_15_cast_fu_244_p3));
    add_ln99_fu_239_p2 <= std_logic_vector(unsigned(zext_ln99_fu_235_p1) + unsigned(zext_ln90_reg_311));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln89_fu_150_p2)
    begin
        if ((((icmp_ln89_fu_150_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2)) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, icmp_ln89_fu_150_p2)
    begin
        if (((icmp_ln89_fu_150_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    c_fu_224_p2 <= std_logic_vector(unsigned(c_0_reg_116) + unsigned(ap_const_lv2_1));
    icmp_ln89_fu_150_p2 <= "1" when (m_0_reg_68 = ap_const_lv5_10) else "0";
    icmp_ln90_fu_174_p2 <= "1" when (x_0_reg_80 = ap_const_lv4_8) else "0";
    icmp_ln91_fu_196_p2 <= "1" when (y_0_reg_91 = ap_const_lv4_8) else "0";
    icmp_ln93_fu_218_p2 <= "1" when (c_0_reg_116 = ap_const_lv2_2) else "0";
    icmp_ln94_fu_266_p2 <= "1" when (r_0_reg_139 = ap_const_lv2_2) else "0";
    input_r_address0 <= zext_ln95_fu_292_p1(12 - 1 downto 0);

    input_r_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            input_r_ce0 <= ap_const_logic_1;
        else 
            input_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    m_fu_156_p2 <= std_logic_vector(unsigned(m_0_reg_68) + unsigned(ap_const_lv5_1));
    or_ln95_fu_297_p2 <= (max_1_reg_127 or input_r_q0);
    output_r_address0 <= zext_ln99_2_fu_257_p1(10 - 1 downto 0);

    output_r_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            output_r_ce0 <= ap_const_logic_1;
        else 
            output_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    output_r_d0 <= max_0_reg_103;

    output_r_we0_assign_proc : process(ap_CS_fsm_state5, icmp_ln93_fu_218_p2)
    begin
        if (((icmp_ln93_fu_218_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            output_r_we0 <= ap_const_logic_1;
        else 
            output_r_we0 <= ap_const_logic_0;
        end if; 
    end process;

    r_fu_272_p2 <= std_logic_vector(unsigned(r_0_reg_139) + unsigned(ap_const_lv2_1));
    shl_ln95_2_fu_208_p2 <= std_logic_vector(shift_left(unsigned(y_0_reg_91),to_integer(unsigned('0' & ap_const_lv4_1(4-1 downto 0)))));
    shl_ln95_fu_186_p2 <= std_logic_vector(shift_left(unsigned(x_0_reg_80),to_integer(unsigned('0' & ap_const_lv4_1(4-1 downto 0)))));
    tmp_15_cast_fu_244_p3 <= (add_ln99_fu_239_p2 & ap_const_lv3_0);
    tmp_fu_162_p3 <= (m_0_reg_68 & ap_const_lv3_0);
    tmp_s_fu_283_p4 <= ((m_0_reg_68 & add_ln95_2_fu_278_p2) & add_ln95_reg_355);
    x_fu_180_p2 <= std_logic_vector(unsigned(x_0_reg_80) + unsigned(ap_const_lv4_1));
    y_fu_202_p2 <= std_logic_vector(unsigned(y_0_reg_91) + unsigned(ap_const_lv4_1));
    zext_ln90_fu_170_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_fu_162_p3),9));
    zext_ln91_fu_192_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(x_0_reg_80),12));
    zext_ln93_fu_214_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(c_0_reg_116),4));
    zext_ln94_fu_262_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(r_0_reg_139),4));
    zext_ln95_fu_292_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_s_fu_283_p4),64));
    zext_ln99_2_fu_257_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln99_2_fu_252_p2),64));
    zext_ln99_fu_235_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(y_0_reg_91),9));
end behav;
