// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module conv_1_16_18_s (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        input_0_address0,
        input_0_ce0,
        input_0_q0,
        output_r_address0,
        output_r_ce0,
        output_r_we0,
        output_r_d0
);

parameter    ap_ST_fsm_state1 = 9'd1;
parameter    ap_ST_fsm_state2 = 9'd2;
parameter    ap_ST_fsm_state3 = 9'd4;
parameter    ap_ST_fsm_state4 = 9'd8;
parameter    ap_ST_fsm_state5 = 9'd16;
parameter    ap_ST_fsm_state6 = 9'd32;
parameter    ap_ST_fsm_state7 = 9'd64;
parameter    ap_ST_fsm_state8 = 9'd128;
parameter    ap_ST_fsm_state9 = 9'd256;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [8:0] input_0_address0;
output   input_0_ce0;
input  [0:0] input_0_q0;
output  [11:0] output_r_address0;
output   output_r_ce0;
output   output_r_we0;
output  [0:0] output_r_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg input_0_ce0;
reg output_r_ce0;
reg output_r_we0;

(* fsm_encoding = "none" *) reg   [8:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [3:0] threshold_conv1_V_address0;
reg    threshold_conv1_V_ce0;
wire   [3:0] threshold_conv1_V_q0;
wire   [7:0] w_conv1_0_address0;
reg    w_conv1_0_ce0;
wire   [0:0] w_conv1_0_q0;
wire   [4:0] n_fu_190_p2;
reg   [4:0] n_reg_462;
wire    ap_CS_fsm_state2;
wire   [0:0] icmp_ln61_fu_184_p2;
wire  signed [8:0] sext_ln68_fu_223_p1;
reg  signed [8:0] sext_ln68_reg_472;
wire    ap_CS_fsm_state3;
wire   [9:0] zext_ln895_fu_235_p1;
reg   [9:0] zext_ln895_reg_477;
wire  signed [15:0] sext_ln62_fu_239_p1;
reg  signed [15:0] sext_ln62_reg_482;
wire   [4:0] x_fu_249_p2;
reg   [4:0] x_reg_490;
wire    ap_CS_fsm_state4;
wire   [13:0] zext_ln63_fu_255_p1;
reg   [13:0] zext_ln63_reg_495;
wire   [0:0] icmp_ln62_fu_243_p2;
wire   [4:0] y_fu_265_p2;
reg   [4:0] y_reg_503;
wire    ap_CS_fsm_state5;
wire   [1:0] c_fu_281_p2;
reg   [1:0] c_reg_511;
wire    ap_CS_fsm_state6;
wire   [9:0] zext_ln68_14_fu_293_p1;
reg   [9:0] zext_ln68_14_reg_516;
wire   [0:0] icmp_ln65_fu_275_p2;
wire   [8:0] zext_ln66_2_fu_297_p1;
reg   [8:0] zext_ln66_2_reg_521;
wire   [1:0] r_fu_356_p2;
reg   [1:0] r_reg_529;
wire    ap_CS_fsm_state7;
wire   [0:0] icmp_ln66_fu_350_p2;
wire   [8:0] add_ln68_12_fu_429_p2;
reg   [8:0] add_ln68_12_reg_539;
wire    ap_CS_fsm_state8;
reg   [0:0] input_0_load_reg_549;
wire   [15:0] add_ln700_fu_453_p2;
wire    ap_CS_fsm_state9;
reg   [4:0] n_0_reg_102;
reg   [4:0] x_0_reg_114;
wire   [0:0] icmp_ln63_fu_259_p2;
reg   [4:0] y_0_reg_126;
reg   [15:0] p_014_0_reg_138;
reg   [1:0] c_0_reg_150;
reg   [15:0] p_014_1_reg_161;
reg   [1:0] r_0_reg_173;
wire   [63:0] zext_ln68_fu_196_p1;
wire   [63:0] zext_ln73_3_fu_341_p1;
wire   [63:0] zext_ln68_17_fu_403_p1;
wire   [63:0] zext_ln68_19_fu_434_p1;
wire   [6:0] tmp_fu_205_p3;
wire   [7:0] zext_ln68_13_fu_213_p1;
wire   [7:0] zext_ln68_12_fu_201_p1;
wire   [7:0] sub_ln68_fu_217_p2;
wire   [8:0] tmp_s_fu_227_p3;
wire   [4:0] zext_ln65_fu_271_p1;
wire   [4:0] add_ln68_fu_287_p2;
wire   [15:0] shl_ln1503_fu_301_p2;
wire   [15:0] accum_V_fu_307_p2;
wire   [9:0] zext_ln73_fu_319_p1;
wire   [9:0] add_ln73_fu_323_p2;
wire   [13:0] tmp_36_cast_fu_328_p3;
wire   [13:0] add_ln73_2_fu_336_p2;
wire   [4:0] zext_ln66_fu_346_p1;
wire   [4:0] add_ln68_2_fu_362_p2;
wire   [8:0] tmp_3_fu_368_p3;
wire   [5:0] tmp_4_fu_380_p3;
wire   [9:0] zext_ln68_15_fu_376_p1;
wire   [9:0] zext_ln68_16_fu_388_p1;
wire   [9:0] add_ln68_9_fu_392_p2;
wire   [9:0] add_ln68_10_fu_398_p2;
wire   [8:0] zext_ln68_18_fu_408_p1;
wire   [8:0] add_ln68_11_fu_412_p2;
wire   [8:0] shl_ln68_fu_417_p2;
wire   [8:0] sub_ln68_2_fu_423_p2;
wire   [0:0] xor_ln68_fu_438_p2;
wire   [0:0] xor_ln68_2_fu_444_p2;
wire   [15:0] zext_ln700_fu_449_p1;
reg   [8:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 9'd1;
end

conv_1_16_18_s_thbkb #(
    .DataWidth( 4 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
threshold_conv1_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(threshold_conv1_V_address0),
    .ce0(threshold_conv1_V_ce0),
    .q0(threshold_conv1_V_q0)
);

conv_1_16_18_s_w_cud #(
    .DataWidth( 1 ),
    .AddressRange( 144 ),
    .AddressWidth( 8 ))
w_conv1_0_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(w_conv1_0_address0),
    .ce0(w_conv1_0_ce0),
    .q0(w_conv1_0_q0)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln63_fu_259_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        c_0_reg_150 <= 2'd0;
    end else if (((1'b1 == ap_CS_fsm_state7) & (icmp_ln66_fu_350_p2 == 1'd1))) begin
        c_0_reg_150 <= c_reg_511;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln62_fu_243_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        n_0_reg_102 <= n_reg_462;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        n_0_reg_102 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln63_fu_259_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        p_014_0_reg_138 <= 16'd0;
    end else if (((1'b1 == ap_CS_fsm_state7) & (icmp_ln66_fu_350_p2 == 1'd1))) begin
        p_014_0_reg_138 <= p_014_1_reg_161;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln65_fu_275_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state6))) begin
        p_014_1_reg_161 <= p_014_0_reg_138;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        p_014_1_reg_161 <= add_ln700_fu_453_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln65_fu_275_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state6))) begin
        r_0_reg_173 <= 2'd0;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        r_0_reg_173 <= r_reg_529;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state5) & (icmp_ln63_fu_259_p2 == 1'd1))) begin
        x_0_reg_114 <= x_reg_490;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        x_0_reg_114 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln62_fu_243_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        y_0_reg_126 <= 5'd0;
    end else if (((1'b1 == ap_CS_fsm_state6) & (icmp_ln65_fu_275_p2 == 1'd1))) begin
        y_0_reg_126 <= y_reg_503;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln66_fu_350_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state7))) begin
        add_ln68_12_reg_539 <= add_ln68_12_fu_429_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        c_reg_511 <= c_fu_281_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        input_0_load_reg_549 <= input_0_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        n_reg_462 <= n_fu_190_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        r_reg_529 <= r_fu_356_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        sext_ln62_reg_482 <= sext_ln62_fu_239_p1;
        sext_ln68_reg_472 <= sext_ln68_fu_223_p1;
        zext_ln895_reg_477[8 : 4] <= zext_ln895_fu_235_p1[8 : 4];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        x_reg_490 <= x_fu_249_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        y_reg_503 <= y_fu_265_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln62_fu_243_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        zext_ln63_reg_495[4 : 0] <= zext_ln63_fu_255_p1[4 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln65_fu_275_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state6))) begin
        zext_ln66_2_reg_521[1 : 0] <= zext_ln66_2_fu_297_p1[1 : 0];
        zext_ln68_14_reg_516[4 : 0] <= zext_ln68_14_fu_293_p1[4 : 0];
    end
end

always @ (*) begin
    if ((((icmp_ln61_fu_184_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2)) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln61_fu_184_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        input_0_ce0 = 1'b1;
    end else begin
        input_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        output_r_ce0 = 1'b1;
    end else begin
        output_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) & (icmp_ln65_fu_275_p2 == 1'd1))) begin
        output_r_we0 = 1'b1;
    end else begin
        output_r_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        threshold_conv1_V_ce0 = 1'b1;
    end else begin
        threshold_conv1_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        w_conv1_0_ce0 = 1'b1;
    end else begin
        w_conv1_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln61_fu_184_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            if (((icmp_ln62_fu_243_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((1'b1 == ap_CS_fsm_state5) & (icmp_ln63_fu_259_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state6 : begin
            if (((1'b1 == ap_CS_fsm_state6) & (icmp_ln65_fu_275_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state7 : begin
            if (((1'b1 == ap_CS_fsm_state7) & (icmp_ln66_fu_350_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign accum_V_fu_307_p2 = ($signed(16'd65527) + $signed(shl_ln1503_fu_301_p2));

assign add_ln68_10_fu_398_p2 = (zext_ln68_14_reg_516 + add_ln68_9_fu_392_p2);

assign add_ln68_11_fu_412_p2 = ($signed(zext_ln68_18_fu_408_p1) + $signed(sext_ln68_reg_472));

assign add_ln68_12_fu_429_p2 = (zext_ln66_2_reg_521 + sub_ln68_2_fu_423_p2);

assign add_ln68_2_fu_362_p2 = (y_0_reg_126 + zext_ln66_fu_346_p1);

assign add_ln68_9_fu_392_p2 = (zext_ln68_15_fu_376_p1 + zext_ln68_16_fu_388_p1);

assign add_ln68_fu_287_p2 = (zext_ln65_fu_271_p1 + x_0_reg_114);

assign add_ln700_fu_453_p2 = (zext_ln700_fu_449_p1 + p_014_1_reg_161);

assign add_ln73_2_fu_336_p2 = (tmp_36_cast_fu_328_p3 + zext_ln63_reg_495);

assign add_ln73_fu_323_p2 = (zext_ln895_reg_477 + zext_ln73_fu_319_p1);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign c_fu_281_p2 = (c_0_reg_150 + 2'd1);

assign icmp_ln61_fu_184_p2 = ((n_0_reg_102 == 5'd16) ? 1'b1 : 1'b0);

assign icmp_ln62_fu_243_p2 = ((x_0_reg_114 == 5'd16) ? 1'b1 : 1'b0);

assign icmp_ln63_fu_259_p2 = ((y_0_reg_126 == 5'd16) ? 1'b1 : 1'b0);

assign icmp_ln65_fu_275_p2 = ((c_0_reg_150 == 2'd3) ? 1'b1 : 1'b0);

assign icmp_ln66_fu_350_p2 = ((r_0_reg_173 == 2'd3) ? 1'b1 : 1'b0);

assign input_0_address0 = zext_ln68_17_fu_403_p1;

assign n_fu_190_p2 = (n_0_reg_102 + 5'd1);

assign output_r_address0 = zext_ln73_3_fu_341_p1;

assign output_r_d0 = (($signed(accum_V_fu_307_p2) > $signed(sext_ln62_reg_482)) ? 1'b1 : 1'b0);

assign r_fu_356_p2 = (r_0_reg_173 + 2'd1);

assign sext_ln62_fu_239_p1 = $signed(threshold_conv1_V_q0);

assign sext_ln68_fu_223_p1 = $signed(sub_ln68_fu_217_p2);

assign shl_ln1503_fu_301_p2 = p_014_0_reg_138 << 16'd1;

assign shl_ln68_fu_417_p2 = add_ln68_11_fu_412_p2 << 9'd2;

assign sub_ln68_2_fu_423_p2 = (shl_ln68_fu_417_p2 - add_ln68_11_fu_412_p2);

assign sub_ln68_fu_217_p2 = (zext_ln68_13_fu_213_p1 - zext_ln68_12_fu_201_p1);

assign threshold_conv1_V_address0 = zext_ln68_fu_196_p1;

assign tmp_36_cast_fu_328_p3 = {{add_ln73_fu_323_p2}, {4'd0}};

assign tmp_3_fu_368_p3 = {{add_ln68_2_fu_362_p2}, {4'd0}};

assign tmp_4_fu_380_p3 = {{add_ln68_2_fu_362_p2}, {1'd0}};

assign tmp_fu_205_p3 = {{n_0_reg_102}, {2'd0}};

assign tmp_s_fu_227_p3 = {{n_0_reg_102}, {4'd0}};

assign w_conv1_0_address0 = zext_ln68_19_fu_434_p1;

assign x_fu_249_p2 = (x_0_reg_114 + 5'd1);

assign xor_ln68_2_fu_444_p2 = (xor_ln68_fu_438_p2 ^ input_0_load_reg_549);

assign xor_ln68_fu_438_p2 = (w_conv1_0_q0 ^ 1'd1);

assign y_fu_265_p2 = (y_0_reg_126 + 5'd1);

assign zext_ln63_fu_255_p1 = x_0_reg_114;

assign zext_ln65_fu_271_p1 = c_0_reg_150;

assign zext_ln66_2_fu_297_p1 = c_0_reg_150;

assign zext_ln66_fu_346_p1 = r_0_reg_173;

assign zext_ln68_12_fu_201_p1 = n_0_reg_102;

assign zext_ln68_13_fu_213_p1 = tmp_fu_205_p3;

assign zext_ln68_14_fu_293_p1 = add_ln68_fu_287_p2;

assign zext_ln68_15_fu_376_p1 = tmp_3_fu_368_p3;

assign zext_ln68_16_fu_388_p1 = tmp_4_fu_380_p3;

assign zext_ln68_17_fu_403_p1 = add_ln68_10_fu_398_p2;

assign zext_ln68_18_fu_408_p1 = r_0_reg_173;

assign zext_ln68_19_fu_434_p1 = add_ln68_12_reg_539;

assign zext_ln68_fu_196_p1 = n_0_reg_102;

assign zext_ln700_fu_449_p1 = xor_ln68_2_fu_444_p2;

assign zext_ln73_3_fu_341_p1 = add_ln73_2_fu_336_p2;

assign zext_ln73_fu_319_p1 = y_0_reg_126;

assign zext_ln895_fu_235_p1 = tmp_s_fu_227_p3;

always @ (posedge ap_clk) begin
    zext_ln895_reg_477[3:0] <= 4'b0000;
    zext_ln895_reg_477[9] <= 1'b0;
    zext_ln63_reg_495[13:5] <= 9'b000000000;
    zext_ln68_14_reg_516[9:5] <= 5'b00000;
    zext_ln66_2_reg_521[8:2] <= 7'b0000000;
end

endmodule //conv_1_16_18_s
