// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module initialize_padded_me (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        input_r_address0,
        input_r_ce0,
        input_r_we0,
        input_r_d0
);

parameter    ap_ST_fsm_state1 = 4'd1;
parameter    ap_ST_fsm_state2 = 4'd2;
parameter    ap_ST_fsm_state3 = 4'd4;
parameter    ap_ST_fsm_state4 = 4'd8;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [10:0] input_r_address0;
output   input_r_ce0;
output   input_r_we0;
output  [0:0] input_r_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg input_r_ce0;
reg input_r_we0;

(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [4:0] m_fu_87_p2;
reg   [4:0] m_reg_199;
wire    ap_CS_fsm_state2;
wire   [8:0] add_ln41_fu_117_p2;
reg   [8:0] add_ln41_reg_204;
wire   [0:0] icmp_ln38_fu_81_p2;
wire   [3:0] x_fu_129_p2;
reg   [3:0] x_reg_212;
wire    ap_CS_fsm_state3;
wire   [11:0] add_ln41_2_fu_164_p2;
reg   [11:0] add_ln41_2_reg_217;
wire   [0:0] icmp_ln39_fu_123_p2;
wire   [3:0] y_fu_176_p2;
wire    ap_CS_fsm_state4;
reg   [4:0] m_0_reg_48;
reg   [3:0] x_0_reg_59;
wire   [0:0] icmp_ln40_fu_170_p2;
reg   [3:0] y_0_reg_70;
wire   [63:0] zext_ln41_5_fu_191_p1;
wire   [7:0] tmp_fu_93_p3;
wire   [5:0] tmp_s_fu_105_p3;
wire   [8:0] zext_ln41_1_fu_113_p1;
wire   [8:0] zext_ln41_fu_101_p1;
wire   [8:0] zext_ln41_2_fu_135_p1;
wire   [8:0] add_ln41_1_fu_139_p2;
wire   [9:0] tmp_2_fu_152_p3;
wire   [11:0] p_shl2_cast_fu_144_p3;
wire   [11:0] zext_ln41_3_fu_160_p1;
wire   [11:0] zext_ln41_4_fu_182_p1;
wire   [11:0] add_ln41_3_fu_186_p2;
reg   [3:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 4'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln39_fu_123_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        m_0_reg_48 <= m_reg_199;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        m_0_reg_48 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln40_fu_170_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        x_0_reg_59 <= x_reg_212;
    end else if (((icmp_ln38_fu_81_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        x_0_reg_59 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln39_fu_123_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        y_0_reg_70 <= 4'd0;
    end else if (((icmp_ln40_fu_170_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        y_0_reg_70 <= y_fu_176_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln39_fu_123_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        add_ln41_2_reg_217[11 : 1] <= add_ln41_2_fu_164_p2[11 : 1];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln38_fu_81_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        add_ln41_reg_204[8 : 1] <= add_ln41_fu_117_p2[8 : 1];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        m_reg_199 <= m_fu_87_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        x_reg_212 <= x_fu_129_p2;
    end
end

always @ (*) begin
    if ((((icmp_ln38_fu_81_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2)) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln38_fu_81_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        input_r_ce0 = 1'b1;
    end else begin
        input_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln40_fu_170_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        input_r_we0 = 1'b1;
    end else begin
        input_r_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln38_fu_81_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((icmp_ln39_fu_123_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((icmp_ln40_fu_170_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln41_1_fu_139_p2 = (zext_ln41_2_fu_135_p1 + add_ln41_reg_204);

assign add_ln41_2_fu_164_p2 = (p_shl2_cast_fu_144_p3 + zext_ln41_3_fu_160_p1);

assign add_ln41_3_fu_186_p2 = (add_ln41_2_reg_217 + zext_ln41_4_fu_182_p1);

assign add_ln41_fu_117_p2 = (zext_ln41_1_fu_113_p1 + zext_ln41_fu_101_p1);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign icmp_ln38_fu_81_p2 = ((m_0_reg_48 == 5'd16) ? 1'b1 : 1'b0);

assign icmp_ln39_fu_123_p2 = ((x_0_reg_59 == 4'd10) ? 1'b1 : 1'b0);

assign icmp_ln40_fu_170_p2 = ((y_0_reg_70 == 4'd10) ? 1'b1 : 1'b0);

assign input_r_address0 = zext_ln41_5_fu_191_p1;

assign input_r_d0 = 1'd0;

assign m_fu_87_p2 = (m_0_reg_48 + 5'd1);

assign p_shl2_cast_fu_144_p3 = {{add_ln41_1_fu_139_p2}, {3'd0}};

assign tmp_2_fu_152_p3 = {{add_ln41_1_fu_139_p2}, {1'd0}};

assign tmp_fu_93_p3 = {{m_0_reg_48}, {3'd0}};

assign tmp_s_fu_105_p3 = {{m_0_reg_48}, {1'd0}};

assign x_fu_129_p2 = (x_0_reg_59 + 4'd1);

assign y_fu_176_p2 = (y_0_reg_70 + 4'd1);

assign zext_ln41_1_fu_113_p1 = tmp_s_fu_105_p3;

assign zext_ln41_2_fu_135_p1 = x_0_reg_59;

assign zext_ln41_3_fu_160_p1 = tmp_2_fu_152_p3;

assign zext_ln41_4_fu_182_p1 = y_0_reg_70;

assign zext_ln41_5_fu_191_p1 = add_ln41_3_fu_186_p2;

assign zext_ln41_fu_101_p1 = tmp_fu_93_p3;

always @ (posedge ap_clk) begin
    add_ln41_reg_204[0] <= 1'b0;
    add_ln41_2_reg_217[0] <= 1'b0;
end

endmodule //initialize_padded_me
