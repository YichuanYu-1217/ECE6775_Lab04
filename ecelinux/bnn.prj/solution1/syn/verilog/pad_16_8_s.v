// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module pad_16_8_s (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        input_r_address0,
        input_r_ce0,
        input_r_q0,
        output_r_address0,
        output_r_ce0,
        output_r_we0,
        output_r_d0
);

parameter    ap_ST_fsm_state1 = 5'd1;
parameter    ap_ST_fsm_state2 = 5'd2;
parameter    ap_ST_fsm_state3 = 5'd4;
parameter    ap_ST_fsm_state4 = 5'd8;
parameter    ap_ST_fsm_state5 = 5'd16;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [9:0] input_r_address0;
output   input_r_ce0;
input  [0:0] input_r_q0;
output  [10:0] output_r_address0;
output   output_r_ce0;
output   output_r_we0;
output  [0:0] output_r_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg input_r_ce0;
reg output_r_ce0;
reg output_r_we0;

(* fsm_encoding = "none" *) reg   [4:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [4:0] m_fu_102_p2;
reg   [4:0] m_reg_244;
wire    ap_CS_fsm_state2;
wire   [8:0] zext_ln25_fu_116_p1;
reg   [8:0] zext_ln25_reg_249;
wire   [0:0] icmp_ln22_fu_96_p2;
wire   [8:0] add_ln25_fu_132_p2;
reg   [8:0] add_ln25_reg_254;
wire   [3:0] x_fu_144_p2;
reg   [3:0] x_reg_262;
wire    ap_CS_fsm_state3;
wire   [11:0] zext_ln23_fu_150_p1;
reg   [11:0] zext_ln23_reg_267;
wire   [0:0] icmp_ln23_fu_138_p2;
wire   [11:0] zext_ln24_fu_154_p1;
reg   [11:0] zext_ln24_reg_272;
wire   [3:0] y_fu_164_p2;
reg   [3:0] y_reg_280;
wire    ap_CS_fsm_state4;
wire   [0:0] icmp_ln24_fu_158_p2;
wire   [11:0] add_ln25_7_fu_232_p2;
reg   [11:0] add_ln25_7_reg_290;
reg   [4:0] m_0_reg_63;
reg   [3:0] x_0_reg_74;
reg   [3:0] y_0_reg_85;
wire    ap_CS_fsm_state5;
wire   [63:0] zext_ln25_3_fu_192_p1;
wire   [63:0] zext_ln25_6_fu_237_p1;
wire   [7:0] tmp_fu_108_p3;
wire   [5:0] tmp_2_fu_120_p3;
wire   [8:0] zext_ln25_1_fu_128_p1;
wire   [8:0] zext_ln25_2_fu_170_p1;
wire   [8:0] add_ln25_2_fu_174_p2;
wire   [11:0] tmp_4_cast_fu_179_p3;
wire   [11:0] add_ln25_3_fu_187_p2;
wire   [8:0] zext_ln25_4_fu_197_p1;
wire   [8:0] add_ln25_5_fu_201_p2;
wire   [9:0] tmp_1_fu_214_p3;
wire   [11:0] p_shl2_cast_fu_206_p3;
wire   [11:0] zext_ln25_5_fu_222_p1;
wire   [11:0] add_ln25_6_fu_226_p2;
reg   [4:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 5'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln23_fu_138_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        m_0_reg_63 <= m_reg_244;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        m_0_reg_63 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln24_fu_158_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        x_0_reg_74 <= x_reg_262;
    end else if (((icmp_ln22_fu_96_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        x_0_reg_74 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln23_fu_138_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        y_0_reg_85 <= 4'd0;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        y_0_reg_85 <= y_reg_280;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln24_fu_158_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        add_ln25_7_reg_290 <= add_ln25_7_fu_232_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln22_fu_96_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        add_ln25_reg_254[8 : 1] <= add_ln25_fu_132_p2[8 : 1];
        zext_ln25_reg_249[7 : 3] <= zext_ln25_fu_116_p1[7 : 3];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        m_reg_244 <= m_fu_102_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        x_reg_262 <= x_fu_144_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        y_reg_280 <= y_fu_164_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln23_fu_138_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        zext_ln23_reg_267[3 : 0] <= zext_ln23_fu_150_p1[3 : 0];
        zext_ln24_reg_272[3 : 0] <= zext_ln24_fu_154_p1[3 : 0];
    end
end

always @ (*) begin
    if ((((icmp_ln22_fu_96_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2)) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln22_fu_96_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        input_r_ce0 = 1'b1;
    end else begin
        input_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        output_r_ce0 = 1'b1;
    end else begin
        output_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        output_r_we0 = 1'b1;
    end else begin
        output_r_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln22_fu_96_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((icmp_ln23_fu_138_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((icmp_ln24_fu_158_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln25_2_fu_174_p2 = (zext_ln25_2_fu_170_p1 + zext_ln25_reg_249);

assign add_ln25_3_fu_187_p2 = (zext_ln23_reg_267 + tmp_4_cast_fu_179_p3);

assign add_ln25_5_fu_201_p2 = (zext_ln25_4_fu_197_p1 + add_ln25_reg_254);

assign add_ln25_6_fu_226_p2 = (p_shl2_cast_fu_206_p3 + zext_ln25_5_fu_222_p1);

assign add_ln25_7_fu_232_p2 = (zext_ln24_reg_272 + add_ln25_6_fu_226_p2);

assign add_ln25_fu_132_p2 = (zext_ln25_1_fu_128_p1 + zext_ln25_fu_116_p1);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign icmp_ln22_fu_96_p2 = ((m_0_reg_63 == 5'd16) ? 1'b1 : 1'b0);

assign icmp_ln23_fu_138_p2 = ((x_0_reg_74 == 4'd8) ? 1'b1 : 1'b0);

assign icmp_ln24_fu_158_p2 = ((y_0_reg_85 == 4'd8) ? 1'b1 : 1'b0);

assign input_r_address0 = zext_ln25_3_fu_192_p1;

assign m_fu_102_p2 = (m_0_reg_63 + 5'd1);

assign output_r_address0 = zext_ln25_6_fu_237_p1;

assign output_r_d0 = input_r_q0;

assign p_shl2_cast_fu_206_p3 = {{add_ln25_5_fu_201_p2}, {3'd0}};

assign tmp_1_fu_214_p3 = {{add_ln25_5_fu_201_p2}, {1'd0}};

assign tmp_2_fu_120_p3 = {{m_0_reg_63}, {1'd0}};

assign tmp_4_cast_fu_179_p3 = {{add_ln25_2_fu_174_p2}, {3'd0}};

assign tmp_fu_108_p3 = {{m_0_reg_63}, {3'd0}};

assign x_fu_144_p2 = (x_0_reg_74 + 4'd1);

assign y_fu_164_p2 = (y_0_reg_85 + 4'd1);

assign zext_ln23_fu_150_p1 = x_0_reg_74;

assign zext_ln24_fu_154_p1 = x_fu_144_p2;

assign zext_ln25_1_fu_128_p1 = tmp_2_fu_120_p3;

assign zext_ln25_2_fu_170_p1 = y_0_reg_85;

assign zext_ln25_3_fu_192_p1 = add_ln25_3_fu_187_p2;

assign zext_ln25_4_fu_197_p1 = y_fu_164_p2;

assign zext_ln25_5_fu_222_p1 = tmp_1_fu_214_p3;

assign zext_ln25_6_fu_237_p1 = add_ln25_7_reg_290;

assign zext_ln25_fu_116_p1 = tmp_fu_108_p3;

always @ (posedge ap_clk) begin
    zext_ln25_reg_249[2:0] <= 3'b000;
    zext_ln25_reg_249[8] <= 1'b0;
    add_ln25_reg_254[0] <= 1'b0;
    zext_ln23_reg_267[11:4] <= 8'b00000000;
    zext_ln24_reg_272[11:4] <= 8'b00000000;
end

endmodule //pad_16_8_s
