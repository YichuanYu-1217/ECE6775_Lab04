// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module bnn_xcel (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        input_0_address0,
        input_0_ce0,
        input_0_q0,
        ap_return
);

parameter    ap_ST_fsm_state1 = 29'd1;
parameter    ap_ST_fsm_state2 = 29'd2;
parameter    ap_ST_fsm_state3 = 29'd4;
parameter    ap_ST_fsm_state4 = 29'd8;
parameter    ap_ST_fsm_state5 = 29'd16;
parameter    ap_ST_fsm_state6 = 29'd32;
parameter    ap_ST_fsm_state7 = 29'd64;
parameter    ap_ST_fsm_state8 = 29'd128;
parameter    ap_ST_fsm_state9 = 29'd256;
parameter    ap_ST_fsm_state10 = 29'd512;
parameter    ap_ST_fsm_state11 = 29'd1024;
parameter    ap_ST_fsm_state12 = 29'd2048;
parameter    ap_ST_fsm_state13 = 29'd4096;
parameter    ap_ST_fsm_state14 = 29'd8192;
parameter    ap_ST_fsm_state15 = 29'd16384;
parameter    ap_ST_fsm_state16 = 29'd32768;
parameter    ap_ST_fsm_state17 = 29'd65536;
parameter    ap_ST_fsm_state18 = 29'd131072;
parameter    ap_ST_fsm_state19 = 29'd262144;
parameter    ap_ST_fsm_state20 = 29'd524288;
parameter    ap_ST_fsm_state21 = 29'd1048576;
parameter    ap_ST_fsm_state22 = 29'd2097152;
parameter    ap_ST_fsm_state23 = 29'd4194304;
parameter    ap_ST_fsm_state24 = 29'd8388608;
parameter    ap_ST_fsm_state25 = 29'd16777216;
parameter    ap_ST_fsm_state26 = 29'd33554432;
parameter    ap_ST_fsm_state27 = 29'd67108864;
parameter    ap_ST_fsm_state28 = 29'd134217728;
parameter    ap_ST_fsm_state29 = 29'd268435456;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [7:0] input_0_address0;
output   input_0_ce0;
input  [0:0] input_0_q0;
output  [3:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg input_0_ce0;
reg[3:0] ap_return;

(* fsm_encoding = "none" *) reg   [28:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [16:0] w_fc1_address0;
reg    w_fc1_ce0;
wire   [0:0] w_fc1_q0;
wire   [11:0] w_fc2_address0;
reg    w_fc2_ce0;
wire   [0:0] w_fc2_q0;
wire   [4:0] add_ln39_fu_487_p2;
reg   [4:0] add_ln39_reg_926;
wire    ap_CS_fsm_state2;
wire   [9:0] add_ln41_fu_517_p2;
reg   [9:0] add_ln41_reg_931;
wire   [0:0] icmp_ln39_fu_481_p2;
wire   [4:0] add_ln40_fu_529_p2;
wire    ap_CS_fsm_state3;
wire   [4:0] add_ln25_fu_555_p2;
reg   [4:0] add_ln25_reg_947;
wire    ap_CS_fsm_state5;
wire   [9:0] zext_ln25_fu_561_p1;
reg   [9:0] zext_ln25_reg_952;
wire   [0:0] icmp_ln23_fu_549_p2;
wire   [9:0] zext_ln24_fu_565_p1;
reg   [9:0] zext_ln24_reg_957;
wire   [4:0] add_ln25_1_fu_575_p2;
reg   [4:0] add_ln25_1_reg_965;
wire    ap_CS_fsm_state6;
wire   [0:0] icmp_ln24_fu_569_p2;
wire   [9:0] add_ln25_10_fu_633_p2;
reg   [9:0] add_ln25_10_reg_975;
wire   [8:0] n_fu_648_p2;
reg   [8:0] n_reg_983;
wire    ap_CS_fsm_state19;
wire   [63:0] zext_ln168_fu_654_p1;
reg   [63:0] zext_ln168_reg_988;
wire   [0:0] icmp_ln164_fu_642_p2;
wire   [18:0] zext_ln166_fu_658_p1;
reg   [18:0] zext_ln166_reg_993;
wire   [9:0] m_1_fu_668_p2;
reg   [9:0] m_1_reg_1001;
wire    ap_CS_fsm_state20;
wire   [0:0] icmp_ln166_fu_662_p2;
wire   [9:0] accum_V_fu_732_p2;
wire    ap_CS_fsm_state21;
wire   [8:0] m_fu_744_p2;
reg   [8:0] m_reg_1024;
wire    ap_CS_fsm_state22;
wire   [63:0] zext_ln131_fu_750_p1;
reg   [63:0] zext_ln131_reg_1029;
wire   [0:0] icmp_ln130_fu_738_p2;
wire   [3:0] n_1_fu_768_p2;
reg   [3:0] n_1_reg_1042;
wire    ap_CS_fsm_state24;
wire   [63:0] zext_ln168_2_fu_774_p1;
reg   [63:0] zext_ln168_2_reg_1047;
wire   [0:0] icmp_ln164_1_fu_762_p2;
wire   [12:0] zext_ln166_1_fu_778_p1;
reg   [12:0] zext_ln166_1_reg_1052;
wire   [8:0] m_2_fu_788_p2;
reg   [8:0] m_2_reg_1065;
wire    ap_CS_fsm_state25;
wire   [0:0] icmp_ln166_1_fu_782_p2;
wire   [8:0] accum_V_2_fu_870_p2;
wire    ap_CS_fsm_state26;
wire  signed [15:0] max_V_fu_876_p1;
wire    ap_CS_fsm_state27;
wire    ap_CS_fsm_state28;
wire   [0:0] icmp_ln144_fu_880_p2;
wire   [3:0] select_ln145_fu_901_p3;
wire    ap_CS_fsm_state29;
wire   [15:0] select_ln145_1_fu_909_p3;
wire   [3:0] i_fu_917_p2;
reg   [8:0] input_padded_0_address0;
reg    input_padded_0_ce0;
reg    input_padded_0_we0;
reg   [0:0] input_padded_0_d0;
wire   [0:0] input_padded_0_q0;
reg   [11:0] conv1_address0;
reg    conv1_ce0;
reg    conv1_we0;
wire   [0:0] conv1_q0;
reg   [9:0] conv1_pooled_address0;
reg    conv1_pooled_ce0;
reg    conv1_pooled_we0;
wire   [0:0] conv1_pooled_q0;
reg   [10:0] conv1_pooled_padded_address0;
reg    conv1_pooled_padded_ce0;
reg    conv1_pooled_padded_we0;
reg   [0:0] conv1_pooled_padded_d0;
wire   [0:0] conv1_pooled_padded_q0;
reg   [10:0] conv2_address0;
reg    conv2_ce0;
reg    conv2_we0;
wire   [0:0] conv2_q0;
reg   [8:0] conv2_pooled_address0;
reg    conv2_pooled_ce0;
reg    conv2_pooled_we0;
wire   [0:0] conv2_pooled_q0;
reg   [8:0] reshaped_address0;
reg    reshaped_ce0;
reg    reshaped_we0;
wire   [0:0] reshaped_q0;
reg   [7:0] dense1_V_address0;
reg    dense1_V_ce0;
reg    dense1_V_we0;
wire   [10:0] dense1_V_d0;
wire   [10:0] dense1_V_q0;
reg   [7:0] signed1_address0;
reg    signed1_ce0;
reg    signed1_we0;
wire   [0:0] signed1_d0;
wire   [0:0] signed1_q0;
reg   [3:0] dense2_V_address0;
reg    dense2_V_ce0;
reg    dense2_V_we0;
wire   [9:0] dense2_V_d0;
wire   [9:0] dense2_V_q0;
wire    grp_conv_16_32_10_s_fu_432_ap_start;
wire    grp_conv_16_32_10_s_fu_432_ap_done;
wire    grp_conv_16_32_10_s_fu_432_ap_idle;
wire    grp_conv_16_32_10_s_fu_432_ap_ready;
wire   [10:0] grp_conv_16_32_10_s_fu_432_input_r_address0;
wire    grp_conv_16_32_10_s_fu_432_input_r_ce0;
wire   [10:0] grp_conv_16_32_10_s_fu_432_output_r_address0;
wire    grp_conv_16_32_10_s_fu_432_output_r_ce0;
wire    grp_conv_16_32_10_s_fu_432_output_r_we0;
wire   [0:0] grp_conv_16_32_10_s_fu_432_output_r_d0;
wire    grp_conv_1_16_18_s_fu_442_ap_start;
wire    grp_conv_1_16_18_s_fu_442_ap_done;
wire    grp_conv_1_16_18_s_fu_442_ap_idle;
wire    grp_conv_1_16_18_s_fu_442_ap_ready;
wire   [8:0] grp_conv_1_16_18_s_fu_442_input_0_address0;
wire    grp_conv_1_16_18_s_fu_442_input_0_ce0;
wire   [11:0] grp_conv_1_16_18_s_fu_442_output_r_address0;
wire    grp_conv_1_16_18_s_fu_442_output_r_ce0;
wire    grp_conv_1_16_18_s_fu_442_output_r_we0;
wire   [0:0] grp_conv_1_16_18_s_fu_442_output_r_d0;
wire    grp_max_pool_16_16_s_fu_452_ap_start;
wire    grp_max_pool_16_16_s_fu_452_ap_done;
wire    grp_max_pool_16_16_s_fu_452_ap_idle;
wire    grp_max_pool_16_16_s_fu_452_ap_ready;
wire   [11:0] grp_max_pool_16_16_s_fu_452_input_r_address0;
wire    grp_max_pool_16_16_s_fu_452_input_r_ce0;
wire   [9:0] grp_max_pool_16_16_s_fu_452_output_r_address0;
wire    grp_max_pool_16_16_s_fu_452_output_r_ce0;
wire    grp_max_pool_16_16_s_fu_452_output_r_we0;
wire   [0:0] grp_max_pool_16_16_s_fu_452_output_r_d0;
wire    grp_max_pool_32_8_s_fu_458_ap_start;
wire    grp_max_pool_32_8_s_fu_458_ap_done;
wire    grp_max_pool_32_8_s_fu_458_ap_idle;
wire    grp_max_pool_32_8_s_fu_458_ap_ready;
wire   [10:0] grp_max_pool_32_8_s_fu_458_input_r_address0;
wire    grp_max_pool_32_8_s_fu_458_input_r_ce0;
wire   [8:0] grp_max_pool_32_8_s_fu_458_output_r_address0;
wire    grp_max_pool_32_8_s_fu_458_output_r_ce0;
wire    grp_max_pool_32_8_s_fu_458_output_r_we0;
wire   [0:0] grp_max_pool_32_8_s_fu_458_output_r_d0;
wire    grp_pad_16_8_s_fu_464_ap_start;
wire    grp_pad_16_8_s_fu_464_ap_done;
wire    grp_pad_16_8_s_fu_464_ap_idle;
wire    grp_pad_16_8_s_fu_464_ap_ready;
wire   [9:0] grp_pad_16_8_s_fu_464_input_r_address0;
wire    grp_pad_16_8_s_fu_464_input_r_ce0;
wire   [10:0] grp_pad_16_8_s_fu_464_output_r_address0;
wire    grp_pad_16_8_s_fu_464_output_r_ce0;
wire    grp_pad_16_8_s_fu_464_output_r_we0;
wire   [0:0] grp_pad_16_8_s_fu_464_output_r_d0;
wire    grp_flatten_fu_470_ap_start;
wire    grp_flatten_fu_470_ap_done;
wire    grp_flatten_fu_470_ap_idle;
wire    grp_flatten_fu_470_ap_ready;
wire   [8:0] grp_flatten_fu_470_input_r_address0;
wire    grp_flatten_fu_470_input_r_ce0;
wire   [8:0] grp_flatten_fu_470_output_r_address0;
wire    grp_flatten_fu_470_output_r_ce0;
wire    grp_flatten_fu_470_output_r_we0;
wire   [0:0] grp_flatten_fu_470_output_r_d0;
wire    grp_initialize_padded_me_fu_476_ap_start;
wire    grp_initialize_padded_me_fu_476_ap_done;
wire    grp_initialize_padded_me_fu_476_ap_idle;
wire    grp_initialize_padded_me_fu_476_ap_ready;
wire   [10:0] grp_initialize_padded_me_fu_476_input_r_address0;
wire    grp_initialize_padded_me_fu_476_input_r_ce0;
wire    grp_initialize_padded_me_fu_476_input_r_we0;
wire   [0:0] grp_initialize_padded_me_fu_476_input_r_d0;
reg   [4:0] x_0_0_i_reg_275;
wire   [0:0] icmp_ln40_fu_523_p2;
reg   [4:0] y_0_0_i_reg_286;
reg   [4:0] x_0_0_i1_reg_297;
wire    ap_CS_fsm_state4;
reg   [4:0] y_0_0_i3_reg_308;
wire    ap_CS_fsm_state7;
reg   [8:0] n_0_i_reg_319;
wire    ap_CS_fsm_state18;
reg   [9:0] p_04_0_i_reg_330;
reg   [9:0] m_0_i_reg_342;
reg   [8:0] m_0_i7_reg_353;
wire    ap_CS_fsm_state23;
reg   [3:0] n_0_i9_reg_364;
reg   [8:0] p_04_0_i13_reg_375;
reg   [8:0] m_0_i14_reg_387;
reg   [3:0] agg_result_V_0_i_reg_398;
reg   [15:0] p_012_0_i_reg_410;
reg   [3:0] max_id_V_reg_420;
reg    grp_conv_16_32_10_s_fu_432_ap_start_reg;
wire    ap_CS_fsm_state13;
wire    ap_CS_fsm_state14;
reg    grp_conv_1_16_18_s_fu_442_ap_start_reg;
wire    ap_CS_fsm_state8;
reg    grp_max_pool_16_16_s_fu_452_ap_start_reg;
wire    ap_CS_fsm_state9;
wire    ap_CS_fsm_state10;
reg    grp_max_pool_32_8_s_fu_458_ap_start_reg;
wire    ap_CS_fsm_state15;
wire    ap_CS_fsm_state16;
reg    grp_pad_16_8_s_fu_464_ap_start_reg;
wire    ap_CS_fsm_state11;
wire    ap_CS_fsm_state12;
reg    grp_flatten_fu_470_ap_start_reg;
wire    ap_CS_fsm_state17;
reg    grp_initialize_padded_me_fu_476_ap_start_reg;
wire   [63:0] zext_ln41_8_fu_544_p1;
wire   [63:0] zext_ln25_8_fu_598_p1;
wire   [63:0] zext_ln25_11_fu_638_p1;
wire   [63:0] zext_ln168_5_fu_696_p1;
wire   [63:0] zext_ln168_1_fu_674_p1;
wire   [63:0] zext_ln168_8_fu_834_p1;
wire   [63:0] zext_ln168_3_fu_794_p1;
wire   [63:0] zext_ln145_fu_886_p1;
wire   [8:0] tmp_fu_493_p3;
wire   [5:0] tmp_s_fu_505_p3;
wire   [9:0] zext_ln41_6_fu_513_p1;
wire   [9:0] zext_ln41_fu_501_p1;
wire   [9:0] zext_ln41_7_fu_535_p1;
wire   [9:0] add_ln41_4_fu_539_p2;
wire   [8:0] tmp_5_fu_581_p3;
wire   [9:0] zext_ln25_7_fu_589_p1;
wire   [9:0] add_ln25_8_fu_593_p2;
wire   [8:0] tmp_6_fu_603_p3;
wire   [5:0] tmp_7_fu_615_p3;
wire   [9:0] zext_ln25_10_fu_623_p1;
wire   [9:0] zext_ln25_9_fu_611_p1;
wire   [9:0] add_ln25_9_fu_627_p2;
wire   [17:0] tmp_8_fu_679_p3;
wire   [18:0] zext_ln168_4_fu_687_p1;
wire   [18:0] add_ln168_fu_691_p2;
wire   [10:0] shl_ln_fu_701_p3;
wire   [0:0] xor_ln168_fu_716_p2;
wire   [0:0] xor_ln168_1_fu_722_p2;
wire   [9:0] zext_ln700_fu_728_p1;
wire   [11:0] tmp_9_fu_799_p3;
wire   [9:0] tmp_10_fu_811_p3;
wire   [12:0] zext_ln168_7_fu_819_p1;
wire   [12:0] zext_ln168_6_fu_807_p1;
wire   [12:0] add_ln168_1_fu_823_p2;
wire   [12:0] add_ln168_2_fu_829_p2;
wire   [9:0] shl_ln1503_1_fu_839_p3;
wire   [0:0] xor_ln168_2_fu_854_p2;
wire   [0:0] xor_ln168_3_fu_860_p2;
wire   [8:0] zext_ln700_1_fu_866_p1;
wire  signed [15:0] max_V_1_fu_891_p1;
wire   [0:0] icmp_ln895_1_fu_895_p2;
reg   [3:0] ap_return_preg;
reg   [28:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 29'd1;
#0 grp_conv_16_32_10_s_fu_432_ap_start_reg = 1'b0;
#0 grp_conv_1_16_18_s_fu_442_ap_start_reg = 1'b0;
#0 grp_max_pool_16_16_s_fu_452_ap_start_reg = 1'b0;
#0 grp_max_pool_32_8_s_fu_458_ap_start_reg = 1'b0;
#0 grp_pad_16_8_s_fu_464_ap_start_reg = 1'b0;
#0 grp_flatten_fu_470_ap_start_reg = 1'b0;
#0 grp_initialize_padded_me_fu_476_ap_start_reg = 1'b0;
#0 ap_return_preg = 4'd0;
end

bnn_xcel_w_fc1 #(
    .DataWidth( 1 ),
    .AddressRange( 131072 ),
    .AddressWidth( 17 ))
w_fc1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(w_fc1_address0),
    .ce0(w_fc1_ce0),
    .q0(w_fc1_q0)
);

bnn_xcel_w_fc2 #(
    .DataWidth( 1 ),
    .AddressRange( 2560 ),
    .AddressWidth( 12 ))
w_fc2_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(w_fc2_address0),
    .ce0(w_fc2_ce0),
    .q0(w_fc2_q0)
);

bnn_xcel_input_pafYi #(
    .DataWidth( 1 ),
    .AddressRange( 324 ),
    .AddressWidth( 9 ))
input_padded_0_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(input_padded_0_address0),
    .ce0(input_padded_0_ce0),
    .we0(input_padded_0_we0),
    .d0(input_padded_0_d0),
    .q0(input_padded_0_q0)
);

bnn_xcel_conv1 #(
    .DataWidth( 1 ),
    .AddressRange( 4096 ),
    .AddressWidth( 12 ))
conv1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(conv1_address0),
    .ce0(conv1_ce0),
    .we0(conv1_we0),
    .d0(grp_conv_1_16_18_s_fu_442_output_r_d0),
    .q0(conv1_q0)
);

bnn_xcel_conv1_pog8j #(
    .DataWidth( 1 ),
    .AddressRange( 1024 ),
    .AddressWidth( 10 ))
conv1_pooled_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(conv1_pooled_address0),
    .ce0(conv1_pooled_ce0),
    .we0(conv1_pooled_we0),
    .d0(grp_max_pool_16_16_s_fu_452_output_r_d0),
    .q0(conv1_pooled_q0)
);

bnn_xcel_conv1_pohbi #(
    .DataWidth( 1 ),
    .AddressRange( 1600 ),
    .AddressWidth( 11 ))
conv1_pooled_padded_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(conv1_pooled_padded_address0),
    .ce0(conv1_pooled_padded_ce0),
    .we0(conv1_pooled_padded_we0),
    .d0(conv1_pooled_padded_d0),
    .q0(conv1_pooled_padded_q0)
);

bnn_xcel_conv2 #(
    .DataWidth( 1 ),
    .AddressRange( 2048 ),
    .AddressWidth( 11 ))
conv2_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(conv2_address0),
    .ce0(conv2_ce0),
    .we0(conv2_we0),
    .d0(grp_conv_16_32_10_s_fu_432_output_r_d0),
    .q0(conv2_q0)
);

bnn_xcel_conv2_poibs #(
    .DataWidth( 1 ),
    .AddressRange( 512 ),
    .AddressWidth( 9 ))
conv2_pooled_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(conv2_pooled_address0),
    .ce0(conv2_pooled_ce0),
    .we0(conv2_pooled_we0),
    .d0(grp_max_pool_32_8_s_fu_458_output_r_d0),
    .q0(conv2_pooled_q0)
);

bnn_xcel_conv2_poibs #(
    .DataWidth( 1 ),
    .AddressRange( 512 ),
    .AddressWidth( 9 ))
reshaped_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(reshaped_address0),
    .ce0(reshaped_ce0),
    .we0(reshaped_we0),
    .d0(grp_flatten_fu_470_output_r_d0),
    .q0(reshaped_q0)
);

bnn_xcel_dense1_V #(
    .DataWidth( 11 ),
    .AddressRange( 256 ),
    .AddressWidth( 8 ))
dense1_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(dense1_V_address0),
    .ce0(dense1_V_ce0),
    .we0(dense1_V_we0),
    .d0(dense1_V_d0),
    .q0(dense1_V_q0)
);

bnn_xcel_signed1 #(
    .DataWidth( 1 ),
    .AddressRange( 256 ),
    .AddressWidth( 8 ))
signed1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(signed1_address0),
    .ce0(signed1_ce0),
    .we0(signed1_we0),
    .d0(signed1_d0),
    .q0(signed1_q0)
);

bnn_xcel_dense2_V #(
    .DataWidth( 10 ),
    .AddressRange( 10 ),
    .AddressWidth( 4 ))
dense2_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(dense2_V_address0),
    .ce0(dense2_V_ce0),
    .we0(dense2_V_we0),
    .d0(dense2_V_d0),
    .q0(dense2_V_q0)
);

conv_16_32_10_s grp_conv_16_32_10_s_fu_432(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_conv_16_32_10_s_fu_432_ap_start),
    .ap_done(grp_conv_16_32_10_s_fu_432_ap_done),
    .ap_idle(grp_conv_16_32_10_s_fu_432_ap_idle),
    .ap_ready(grp_conv_16_32_10_s_fu_432_ap_ready),
    .input_r_address0(grp_conv_16_32_10_s_fu_432_input_r_address0),
    .input_r_ce0(grp_conv_16_32_10_s_fu_432_input_r_ce0),
    .input_r_q0(conv1_pooled_padded_q0),
    .output_r_address0(grp_conv_16_32_10_s_fu_432_output_r_address0),
    .output_r_ce0(grp_conv_16_32_10_s_fu_432_output_r_ce0),
    .output_r_we0(grp_conv_16_32_10_s_fu_432_output_r_we0),
    .output_r_d0(grp_conv_16_32_10_s_fu_432_output_r_d0)
);

conv_1_16_18_s grp_conv_1_16_18_s_fu_442(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_conv_1_16_18_s_fu_442_ap_start),
    .ap_done(grp_conv_1_16_18_s_fu_442_ap_done),
    .ap_idle(grp_conv_1_16_18_s_fu_442_ap_idle),
    .ap_ready(grp_conv_1_16_18_s_fu_442_ap_ready),
    .input_0_address0(grp_conv_1_16_18_s_fu_442_input_0_address0),
    .input_0_ce0(grp_conv_1_16_18_s_fu_442_input_0_ce0),
    .input_0_q0(input_padded_0_q0),
    .output_r_address0(grp_conv_1_16_18_s_fu_442_output_r_address0),
    .output_r_ce0(grp_conv_1_16_18_s_fu_442_output_r_ce0),
    .output_r_we0(grp_conv_1_16_18_s_fu_442_output_r_we0),
    .output_r_d0(grp_conv_1_16_18_s_fu_442_output_r_d0)
);

max_pool_16_16_s grp_max_pool_16_16_s_fu_452(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_max_pool_16_16_s_fu_452_ap_start),
    .ap_done(grp_max_pool_16_16_s_fu_452_ap_done),
    .ap_idle(grp_max_pool_16_16_s_fu_452_ap_idle),
    .ap_ready(grp_max_pool_16_16_s_fu_452_ap_ready),
    .input_r_address0(grp_max_pool_16_16_s_fu_452_input_r_address0),
    .input_r_ce0(grp_max_pool_16_16_s_fu_452_input_r_ce0),
    .input_r_q0(conv1_q0),
    .output_r_address0(grp_max_pool_16_16_s_fu_452_output_r_address0),
    .output_r_ce0(grp_max_pool_16_16_s_fu_452_output_r_ce0),
    .output_r_we0(grp_max_pool_16_16_s_fu_452_output_r_we0),
    .output_r_d0(grp_max_pool_16_16_s_fu_452_output_r_d0)
);

max_pool_32_8_s grp_max_pool_32_8_s_fu_458(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_max_pool_32_8_s_fu_458_ap_start),
    .ap_done(grp_max_pool_32_8_s_fu_458_ap_done),
    .ap_idle(grp_max_pool_32_8_s_fu_458_ap_idle),
    .ap_ready(grp_max_pool_32_8_s_fu_458_ap_ready),
    .input_r_address0(grp_max_pool_32_8_s_fu_458_input_r_address0),
    .input_r_ce0(grp_max_pool_32_8_s_fu_458_input_r_ce0),
    .input_r_q0(conv2_q0),
    .output_r_address0(grp_max_pool_32_8_s_fu_458_output_r_address0),
    .output_r_ce0(grp_max_pool_32_8_s_fu_458_output_r_ce0),
    .output_r_we0(grp_max_pool_32_8_s_fu_458_output_r_we0),
    .output_r_d0(grp_max_pool_32_8_s_fu_458_output_r_d0)
);

pad_16_8_s grp_pad_16_8_s_fu_464(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_pad_16_8_s_fu_464_ap_start),
    .ap_done(grp_pad_16_8_s_fu_464_ap_done),
    .ap_idle(grp_pad_16_8_s_fu_464_ap_idle),
    .ap_ready(grp_pad_16_8_s_fu_464_ap_ready),
    .input_r_address0(grp_pad_16_8_s_fu_464_input_r_address0),
    .input_r_ce0(grp_pad_16_8_s_fu_464_input_r_ce0),
    .input_r_q0(conv1_pooled_q0),
    .output_r_address0(grp_pad_16_8_s_fu_464_output_r_address0),
    .output_r_ce0(grp_pad_16_8_s_fu_464_output_r_ce0),
    .output_r_we0(grp_pad_16_8_s_fu_464_output_r_we0),
    .output_r_d0(grp_pad_16_8_s_fu_464_output_r_d0)
);

flatten grp_flatten_fu_470(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_flatten_fu_470_ap_start),
    .ap_done(grp_flatten_fu_470_ap_done),
    .ap_idle(grp_flatten_fu_470_ap_idle),
    .ap_ready(grp_flatten_fu_470_ap_ready),
    .input_r_address0(grp_flatten_fu_470_input_r_address0),
    .input_r_ce0(grp_flatten_fu_470_input_r_ce0),
    .input_r_q0(conv2_pooled_q0),
    .output_r_address0(grp_flatten_fu_470_output_r_address0),
    .output_r_ce0(grp_flatten_fu_470_output_r_ce0),
    .output_r_we0(grp_flatten_fu_470_output_r_we0),
    .output_r_d0(grp_flatten_fu_470_output_r_d0)
);

initialize_padded_me grp_initialize_padded_me_fu_476(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_initialize_padded_me_fu_476_ap_start),
    .ap_done(grp_initialize_padded_me_fu_476_ap_done),
    .ap_idle(grp_initialize_padded_me_fu_476_ap_idle),
    .ap_ready(grp_initialize_padded_me_fu_476_ap_ready),
    .input_r_address0(grp_initialize_padded_me_fu_476_input_r_address0),
    .input_r_ce0(grp_initialize_padded_me_fu_476_input_r_ce0),
    .input_r_we0(grp_initialize_padded_me_fu_476_input_r_we0),
    .input_r_d0(grp_initialize_padded_me_fu_476_input_r_d0)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_preg <= 4'd0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state28) & (icmp_ln144_fu_880_p2 == 1'd1))) begin
            ap_return_preg <= agg_result_V_0_i_reg_398;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_conv_16_32_10_s_fu_432_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state13)) begin
            grp_conv_16_32_10_s_fu_432_ap_start_reg <= 1'b1;
        end else if ((grp_conv_16_32_10_s_fu_432_ap_ready == 1'b1)) begin
            grp_conv_16_32_10_s_fu_432_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_conv_1_16_18_s_fu_442_ap_start_reg <= 1'b0;
    end else begin
        if (((icmp_ln23_fu_549_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
            grp_conv_1_16_18_s_fu_442_ap_start_reg <= 1'b1;
        end else if ((grp_conv_1_16_18_s_fu_442_ap_ready == 1'b1)) begin
            grp_conv_1_16_18_s_fu_442_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_flatten_fu_470_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state17)) begin
            grp_flatten_fu_470_ap_start_reg <= 1'b1;
        end else if ((grp_flatten_fu_470_ap_ready == 1'b1)) begin
            grp_flatten_fu_470_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_initialize_padded_me_fu_476_ap_start_reg <= 1'b0;
    end else begin
        if (((icmp_ln39_fu_481_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
            grp_initialize_padded_me_fu_476_ap_start_reg <= 1'b1;
        end else if ((grp_initialize_padded_me_fu_476_ap_ready == 1'b1)) begin
            grp_initialize_padded_me_fu_476_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_max_pool_16_16_s_fu_452_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state9)) begin
            grp_max_pool_16_16_s_fu_452_ap_start_reg <= 1'b1;
        end else if ((grp_max_pool_16_16_s_fu_452_ap_ready == 1'b1)) begin
            grp_max_pool_16_16_s_fu_452_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_max_pool_32_8_s_fu_458_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state15)) begin
            grp_max_pool_32_8_s_fu_458_ap_start_reg <= 1'b1;
        end else if ((grp_max_pool_32_8_s_fu_458_ap_ready == 1'b1)) begin
            grp_max_pool_32_8_s_fu_458_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_pad_16_8_s_fu_464_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state11)) begin
            grp_pad_16_8_s_fu_464_ap_start_reg <= 1'b1;
        end else if ((grp_pad_16_8_s_fu_464_ap_ready == 1'b1)) begin
            grp_pad_16_8_s_fu_464_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state29)) begin
        agg_result_V_0_i_reg_398 <= select_ln145_fu_901_p3;
    end else if ((1'b1 == ap_CS_fsm_state27)) begin
        agg_result_V_0_i_reg_398 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln164_1_fu_762_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state24))) begin
        m_0_i14_reg_387 <= 9'd0;
    end else if ((1'b1 == ap_CS_fsm_state26)) begin
        m_0_i14_reg_387 <= m_2_reg_1065;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state19) & (icmp_ln164_fu_642_p2 == 1'd1))) begin
        m_0_i7_reg_353 <= 9'd0;
    end else if ((1'b1 == ap_CS_fsm_state23)) begin
        m_0_i7_reg_353 <= m_reg_1024;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln164_fu_642_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state19))) begin
        m_0_i_reg_342 <= 10'd0;
    end else if ((1'b1 == ap_CS_fsm_state21)) begin
        m_0_i_reg_342 <= m_1_reg_1001;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state29)) begin
        max_id_V_reg_420 <= i_fu_917_p2;
    end else if ((1'b1 == ap_CS_fsm_state27)) begin
        max_id_V_reg_420 <= 4'd1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state22) & (icmp_ln130_fu_738_p2 == 1'd1))) begin
        n_0_i9_reg_364 <= 4'd0;
    end else if (((1'b1 == ap_CS_fsm_state25) & (icmp_ln166_1_fu_782_p2 == 1'd1))) begin
        n_0_i9_reg_364 <= n_1_reg_1042;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state20) & (icmp_ln166_fu_662_p2 == 1'd1))) begin
        n_0_i_reg_319 <= n_reg_983;
    end else if (((grp_flatten_fu_470_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state18))) begin
        n_0_i_reg_319 <= 9'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state29)) begin
        p_012_0_i_reg_410 <= select_ln145_1_fu_909_p3;
    end else if ((1'b1 == ap_CS_fsm_state27)) begin
        p_012_0_i_reg_410 <= max_V_fu_876_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln164_1_fu_762_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state24))) begin
        p_04_0_i13_reg_375 <= 9'd0;
    end else if ((1'b1 == ap_CS_fsm_state26)) begin
        p_04_0_i13_reg_375 <= accum_V_2_fu_870_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln164_fu_642_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state19))) begin
        p_04_0_i_reg_330 <= 10'd0;
    end else if ((1'b1 == ap_CS_fsm_state21)) begin
        p_04_0_i_reg_330 <= accum_V_fu_732_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) & (icmp_ln24_fu_569_p2 == 1'd1))) begin
        x_0_0_i1_reg_297 <= add_ln25_reg_947;
    end else if (((grp_initialize_padded_me_fu_476_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
        x_0_0_i1_reg_297 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln40_fu_523_p2 == 1'd1))) begin
        x_0_0_i_reg_275 <= add_ln39_reg_926;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        x_0_0_i_reg_275 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln23_fu_549_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        y_0_0_i3_reg_308 <= 5'd0;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        y_0_0_i3_reg_308 <= add_ln25_1_reg_965;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln39_fu_481_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        y_0_0_i_reg_286 <= 5'd0;
    end else if (((icmp_ln40_fu_523_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        y_0_0_i_reg_286 <= add_ln40_fu_529_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln24_fu_569_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state6))) begin
        add_ln25_10_reg_975 <= add_ln25_10_fu_633_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        add_ln25_1_reg_965 <= add_ln25_1_fu_575_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        add_ln25_reg_947 <= add_ln25_fu_555_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        add_ln39_reg_926 <= add_ln39_fu_487_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln39_fu_481_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        add_ln41_reg_931[9 : 1] <= add_ln41_fu_517_p2[9 : 1];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        m_1_reg_1001 <= m_1_fu_668_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state25)) begin
        m_2_reg_1065 <= m_2_fu_788_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state22)) begin
        m_reg_1024 <= m_fu_744_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state24)) begin
        n_1_reg_1042 <= n_1_fu_768_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state19)) begin
        n_reg_983 <= n_fu_648_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln130_fu_738_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state22))) begin
        zext_ln131_reg_1029[8 : 0] <= zext_ln131_fu_750_p1[8 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln164_1_fu_762_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state24))) begin
        zext_ln166_1_reg_1052[3 : 0] <= zext_ln166_1_fu_778_p1[3 : 0];
        zext_ln168_2_reg_1047[3 : 0] <= zext_ln168_2_fu_774_p1[3 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln164_fu_642_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state19))) begin
        zext_ln166_reg_993[8 : 0] <= zext_ln166_fu_658_p1[8 : 0];
        zext_ln168_reg_988[8 : 0] <= zext_ln168_fu_654_p1[8 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln23_fu_549_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        zext_ln24_reg_957[4 : 0] <= zext_ln24_fu_565_p1[4 : 0];
        zext_ln25_reg_952[4 : 0] <= zext_ln25_fu_561_p1[4 : 0];
    end
end

always @ (*) begin
    if ((((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) | ((1'b1 == ap_CS_fsm_state28) & (icmp_ln144_fu_880_p2 == 1'd1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state28) & (icmp_ln144_fu_880_p2 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state28) & (icmp_ln144_fu_880_p2 == 1'd1))) begin
        ap_return = agg_result_V_0_i_reg_398;
    end else begin
        ap_return = ap_return_preg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        conv1_address0 = grp_max_pool_16_16_s_fu_452_input_r_address0;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        conv1_address0 = grp_conv_1_16_18_s_fu_442_output_r_address0;
    end else begin
        conv1_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        conv1_ce0 = grp_max_pool_16_16_s_fu_452_input_r_ce0;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        conv1_ce0 = grp_conv_1_16_18_s_fu_442_output_r_ce0;
    end else begin
        conv1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        conv1_pooled_address0 = grp_pad_16_8_s_fu_464_input_r_address0;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        conv1_pooled_address0 = grp_max_pool_16_16_s_fu_452_output_r_address0;
    end else begin
        conv1_pooled_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        conv1_pooled_ce0 = grp_pad_16_8_s_fu_464_input_r_ce0;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        conv1_pooled_ce0 = grp_max_pool_16_16_s_fu_452_output_r_ce0;
    end else begin
        conv1_pooled_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        conv1_pooled_padded_address0 = grp_initialize_padded_me_fu_476_input_r_address0;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        conv1_pooled_padded_address0 = grp_pad_16_8_s_fu_464_output_r_address0;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        conv1_pooled_padded_address0 = grp_conv_16_32_10_s_fu_432_input_r_address0;
    end else begin
        conv1_pooled_padded_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        conv1_pooled_padded_ce0 = grp_initialize_padded_me_fu_476_input_r_ce0;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        conv1_pooled_padded_ce0 = grp_pad_16_8_s_fu_464_output_r_ce0;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        conv1_pooled_padded_ce0 = grp_conv_16_32_10_s_fu_432_input_r_ce0;
    end else begin
        conv1_pooled_padded_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        conv1_pooled_padded_d0 = grp_initialize_padded_me_fu_476_input_r_d0;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        conv1_pooled_padded_d0 = grp_pad_16_8_s_fu_464_output_r_d0;
    end else begin
        conv1_pooled_padded_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        conv1_pooled_padded_we0 = grp_initialize_padded_me_fu_476_input_r_we0;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        conv1_pooled_padded_we0 = grp_pad_16_8_s_fu_464_output_r_we0;
    end else begin
        conv1_pooled_padded_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        conv1_pooled_we0 = grp_max_pool_16_16_s_fu_452_output_r_we0;
    end else begin
        conv1_pooled_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        conv1_we0 = grp_conv_1_16_18_s_fu_442_output_r_we0;
    end else begin
        conv1_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        conv2_address0 = grp_max_pool_32_8_s_fu_458_input_r_address0;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        conv2_address0 = grp_conv_16_32_10_s_fu_432_output_r_address0;
    end else begin
        conv2_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        conv2_ce0 = grp_max_pool_32_8_s_fu_458_input_r_ce0;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        conv2_ce0 = grp_conv_16_32_10_s_fu_432_output_r_ce0;
    end else begin
        conv2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        conv2_pooled_address0 = grp_flatten_fu_470_input_r_address0;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        conv2_pooled_address0 = grp_max_pool_32_8_s_fu_458_output_r_address0;
    end else begin
        conv2_pooled_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        conv2_pooled_ce0 = grp_flatten_fu_470_input_r_ce0;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        conv2_pooled_ce0 = grp_max_pool_32_8_s_fu_458_output_r_ce0;
    end else begin
        conv2_pooled_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        conv2_pooled_we0 = grp_max_pool_32_8_s_fu_458_output_r_we0;
    end else begin
        conv2_pooled_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        conv2_we0 = grp_conv_16_32_10_s_fu_432_output_r_we0;
    end else begin
        conv2_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state22)) begin
        dense1_V_address0 = zext_ln131_fu_750_p1;
    end else if ((1'b1 == ap_CS_fsm_state20)) begin
        dense1_V_address0 = zext_ln168_reg_988;
    end else begin
        dense1_V_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state20))) begin
        dense1_V_ce0 = 1'b1;
    end else begin
        dense1_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state20) & (icmp_ln166_fu_662_p2 == 1'd1))) begin
        dense1_V_we0 = 1'b1;
    end else begin
        dense1_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state28)) begin
        dense2_V_address0 = zext_ln145_fu_886_p1;
    end else if ((1'b1 == ap_CS_fsm_state25)) begin
        dense2_V_address0 = zext_ln168_2_reg_1047;
    end else if ((1'b1 == ap_CS_fsm_state24)) begin
        dense2_V_address0 = 64'd0;
    end else begin
        dense2_V_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state28) | (1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state24))) begin
        dense2_V_ce0 = 1'b1;
    end else begin
        dense2_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state25) & (icmp_ln166_1_fu_782_p2 == 1'd1))) begin
        dense2_V_we0 = 1'b1;
    end else begin
        dense2_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        input_0_ce0 = 1'b1;
    end else begin
        input_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        input_padded_0_address0 = zext_ln25_11_fu_638_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        input_padded_0_address0 = zext_ln41_8_fu_544_p1;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        input_padded_0_address0 = grp_conv_1_16_18_s_fu_442_input_0_address0;
    end else begin
        input_padded_0_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state7))) begin
        input_padded_0_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        input_padded_0_ce0 = grp_conv_1_16_18_s_fu_442_input_0_ce0;
    end else begin
        input_padded_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        input_padded_0_d0 = input_0_q0;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        input_padded_0_d0 = 1'd1;
    end else begin
        input_padded_0_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) | ((icmp_ln40_fu_523_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3)))) begin
        input_padded_0_we0 = 1'b1;
    end else begin
        input_padded_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        reshaped_address0 = zext_ln168_1_fu_674_p1;
    end else if ((1'b1 == ap_CS_fsm_state18)) begin
        reshaped_address0 = grp_flatten_fu_470_output_r_address0;
    end else begin
        reshaped_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        reshaped_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state18)) begin
        reshaped_ce0 = grp_flatten_fu_470_output_r_ce0;
    end else begin
        reshaped_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        reshaped_we0 = grp_flatten_fu_470_output_r_we0;
    end else begin
        reshaped_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state25)) begin
        signed1_address0 = zext_ln168_3_fu_794_p1;
    end else if ((1'b1 == ap_CS_fsm_state23)) begin
        signed1_address0 = zext_ln131_reg_1029;
    end else begin
        signed1_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state25))) begin
        signed1_ce0 = 1'b1;
    end else begin
        signed1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state23)) begin
        signed1_we0 = 1'b1;
    end else begin
        signed1_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        w_fc1_ce0 = 1'b1;
    end else begin
        w_fc1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state25)) begin
        w_fc2_ce0 = 1'b1;
    end else begin
        w_fc2_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln39_fu_481_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln40_fu_523_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((grp_initialize_padded_me_fu_476_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((icmp_ln23_fu_549_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_state6 : begin
            if (((1'b1 == ap_CS_fsm_state6) & (icmp_ln24_fu_569_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state8 : begin
            if (((grp_conv_1_16_18_s_fu_442_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state8))) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            if (((grp_max_pool_16_16_s_fu_452_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state10))) begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            if (((grp_pad_16_8_s_fu_464_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state12))) begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            if (((grp_conv_16_32_10_s_fu_432_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state14))) begin
                ap_NS_fsm = ap_ST_fsm_state15;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            if (((grp_max_pool_32_8_s_fu_458_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state16))) begin
                ap_NS_fsm = ap_ST_fsm_state17;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state16;
            end
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            if (((grp_flatten_fu_470_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state18))) begin
                ap_NS_fsm = ap_ST_fsm_state19;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state18;
            end
        end
        ap_ST_fsm_state19 : begin
            if (((1'b1 == ap_CS_fsm_state19) & (icmp_ln164_fu_642_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state22;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state20;
            end
        end
        ap_ST_fsm_state20 : begin
            if (((1'b1 == ap_CS_fsm_state20) & (icmp_ln166_fu_662_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state19;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state21;
            end
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state22 : begin
            if (((1'b1 == ap_CS_fsm_state22) & (icmp_ln130_fu_738_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state24;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state23;
            end
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state24 : begin
            if (((icmp_ln164_1_fu_762_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state24))) begin
                ap_NS_fsm = ap_ST_fsm_state25;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state27;
            end
        end
        ap_ST_fsm_state25 : begin
            if (((1'b1 == ap_CS_fsm_state25) & (icmp_ln166_1_fu_782_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state24;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state26;
            end
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            if (((1'b1 == ap_CS_fsm_state28) & (icmp_ln144_fu_880_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state29;
            end
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign accum_V_2_fu_870_p2 = (p_04_0_i13_reg_375 + zext_ln700_1_fu_866_p1);

assign accum_V_fu_732_p2 = (zext_ln700_fu_728_p1 + p_04_0_i_reg_330);

assign add_ln168_1_fu_823_p2 = (zext_ln168_7_fu_819_p1 + zext_ln168_6_fu_807_p1);

assign add_ln168_2_fu_829_p2 = (add_ln168_1_fu_823_p2 + zext_ln166_1_reg_1052);

assign add_ln168_fu_691_p2 = (zext_ln166_reg_993 + zext_ln168_4_fu_687_p1);

assign add_ln25_10_fu_633_p2 = (add_ln25_9_fu_627_p2 + zext_ln24_reg_957);

assign add_ln25_1_fu_575_p2 = (y_0_0_i3_reg_308 + 5'd1);

assign add_ln25_8_fu_593_p2 = (zext_ln25_7_fu_589_p1 + zext_ln25_reg_952);

assign add_ln25_9_fu_627_p2 = (zext_ln25_10_fu_623_p1 + zext_ln25_9_fu_611_p1);

assign add_ln25_fu_555_p2 = (x_0_0_i1_reg_297 + 5'd1);

assign add_ln39_fu_487_p2 = (x_0_0_i_reg_275 + 5'd1);

assign add_ln40_fu_529_p2 = (y_0_0_i_reg_286 + 5'd1);

assign add_ln41_4_fu_539_p2 = (add_ln41_reg_931 + zext_ln41_7_fu_535_p1);

assign add_ln41_fu_517_p2 = (zext_ln41_6_fu_513_p1 + zext_ln41_fu_501_p1);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state19 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_state21 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_state22 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_state23 = ap_CS_fsm[32'd22];

assign ap_CS_fsm_state24 = ap_CS_fsm[32'd23];

assign ap_CS_fsm_state25 = ap_CS_fsm[32'd24];

assign ap_CS_fsm_state26 = ap_CS_fsm[32'd25];

assign ap_CS_fsm_state27 = ap_CS_fsm[32'd26];

assign ap_CS_fsm_state28 = ap_CS_fsm[32'd27];

assign ap_CS_fsm_state29 = ap_CS_fsm[32'd28];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign dense1_V_d0 = ($signed(shl_ln_fu_701_p3) + $signed(11'd1536));

assign dense2_V_d0 = ($signed(shl_ln1503_1_fu_839_p3) + $signed(10'd768));

assign grp_conv_16_32_10_s_fu_432_ap_start = grp_conv_16_32_10_s_fu_432_ap_start_reg;

assign grp_conv_1_16_18_s_fu_442_ap_start = grp_conv_1_16_18_s_fu_442_ap_start_reg;

assign grp_flatten_fu_470_ap_start = grp_flatten_fu_470_ap_start_reg;

assign grp_initialize_padded_me_fu_476_ap_start = grp_initialize_padded_me_fu_476_ap_start_reg;

assign grp_max_pool_16_16_s_fu_452_ap_start = grp_max_pool_16_16_s_fu_452_ap_start_reg;

assign grp_max_pool_32_8_s_fu_458_ap_start = grp_max_pool_32_8_s_fu_458_ap_start_reg;

assign grp_pad_16_8_s_fu_464_ap_start = grp_pad_16_8_s_fu_464_ap_start_reg;

assign i_fu_917_p2 = (max_id_V_reg_420 + 4'd1);

assign icmp_ln130_fu_738_p2 = ((m_0_i7_reg_353 == 9'd256) ? 1'b1 : 1'b0);

assign icmp_ln144_fu_880_p2 = ((max_id_V_reg_420 == 4'd10) ? 1'b1 : 1'b0);

assign icmp_ln164_1_fu_762_p2 = ((n_0_i9_reg_364 == 4'd10) ? 1'b1 : 1'b0);

assign icmp_ln164_fu_642_p2 = ((n_0_i_reg_319 == 9'd256) ? 1'b1 : 1'b0);

assign icmp_ln166_1_fu_782_p2 = ((m_0_i14_reg_387 == 9'd256) ? 1'b1 : 1'b0);

assign icmp_ln166_fu_662_p2 = ((m_0_i_reg_342 == 10'd512) ? 1'b1 : 1'b0);

assign icmp_ln23_fu_549_p2 = ((x_0_0_i1_reg_297 == 5'd16) ? 1'b1 : 1'b0);

assign icmp_ln24_fu_569_p2 = ((y_0_0_i3_reg_308 == 5'd16) ? 1'b1 : 1'b0);

assign icmp_ln39_fu_481_p2 = ((x_0_0_i_reg_275 == 5'd18) ? 1'b1 : 1'b0);

assign icmp_ln40_fu_523_p2 = ((y_0_0_i_reg_286 == 5'd18) ? 1'b1 : 1'b0);

assign icmp_ln895_1_fu_895_p2 = (($signed(max_V_1_fu_891_p1) > $signed(p_012_0_i_reg_410)) ? 1'b1 : 1'b0);

assign input_0_address0 = zext_ln25_8_fu_598_p1;

assign m_1_fu_668_p2 = (m_0_i_reg_342 + 10'd1);

assign m_2_fu_788_p2 = (m_0_i14_reg_387 + 9'd1);

assign m_fu_744_p2 = (m_0_i7_reg_353 + 9'd1);

assign max_V_1_fu_891_p1 = $signed(dense2_V_q0);

assign max_V_fu_876_p1 = $signed(dense2_V_q0);

assign n_1_fu_768_p2 = (n_0_i9_reg_364 + 4'd1);

assign n_fu_648_p2 = (n_0_i_reg_319 + 9'd1);

assign select_ln145_1_fu_909_p3 = ((icmp_ln895_1_fu_895_p2[0:0] === 1'b1) ? max_V_1_fu_891_p1 : p_012_0_i_reg_410);

assign select_ln145_fu_901_p3 = ((icmp_ln895_1_fu_895_p2[0:0] === 1'b1) ? max_id_V_reg_420 : agg_result_V_0_i_reg_398);

assign shl_ln1503_1_fu_839_p3 = {{p_04_0_i13_reg_375}, {1'd0}};

assign shl_ln_fu_701_p3 = {{p_04_0_i_reg_330}, {1'd0}};

assign signed1_d0 = (($signed(dense1_V_q0) > $signed(11'd0)) ? 1'b1 : 1'b0);

assign tmp_10_fu_811_p3 = {{m_0_i14_reg_387}, {1'd0}};

assign tmp_5_fu_581_p3 = {{y_0_0_i3_reg_308}, {4'd0}};

assign tmp_6_fu_603_p3 = {{add_ln25_1_fu_575_p2}, {4'd0}};

assign tmp_7_fu_615_p3 = {{add_ln25_1_fu_575_p2}, {1'd0}};

assign tmp_8_fu_679_p3 = {{m_0_i_reg_342}, {8'd0}};

assign tmp_9_fu_799_p3 = {{m_0_i14_reg_387}, {3'd0}};

assign tmp_fu_493_p3 = {{x_0_0_i_reg_275}, {4'd0}};

assign tmp_s_fu_505_p3 = {{x_0_0_i_reg_275}, {1'd0}};

assign w_fc1_address0 = zext_ln168_5_fu_696_p1;

assign w_fc2_address0 = zext_ln168_8_fu_834_p1;

assign xor_ln168_1_fu_722_p2 = (xor_ln168_fu_716_p2 ^ reshaped_q0);

assign xor_ln168_2_fu_854_p2 = (w_fc2_q0 ^ 1'd1);

assign xor_ln168_3_fu_860_p2 = (xor_ln168_2_fu_854_p2 ^ signed1_q0);

assign xor_ln168_fu_716_p2 = (w_fc1_q0 ^ 1'd1);

assign zext_ln131_fu_750_p1 = m_0_i7_reg_353;

assign zext_ln145_fu_886_p1 = max_id_V_reg_420;

assign zext_ln166_1_fu_778_p1 = n_0_i9_reg_364;

assign zext_ln166_fu_658_p1 = n_0_i_reg_319;

assign zext_ln168_1_fu_674_p1 = m_0_i_reg_342;

assign zext_ln168_2_fu_774_p1 = n_0_i9_reg_364;

assign zext_ln168_3_fu_794_p1 = m_0_i14_reg_387;

assign zext_ln168_4_fu_687_p1 = tmp_8_fu_679_p3;

assign zext_ln168_5_fu_696_p1 = add_ln168_fu_691_p2;

assign zext_ln168_6_fu_807_p1 = tmp_9_fu_799_p3;

assign zext_ln168_7_fu_819_p1 = tmp_10_fu_811_p3;

assign zext_ln168_8_fu_834_p1 = add_ln168_2_fu_829_p2;

assign zext_ln168_fu_654_p1 = n_0_i_reg_319;

assign zext_ln24_fu_565_p1 = add_ln25_fu_555_p2;

assign zext_ln25_10_fu_623_p1 = tmp_7_fu_615_p3;

assign zext_ln25_11_fu_638_p1 = add_ln25_10_reg_975;

assign zext_ln25_7_fu_589_p1 = tmp_5_fu_581_p3;

assign zext_ln25_8_fu_598_p1 = add_ln25_8_fu_593_p2;

assign zext_ln25_9_fu_611_p1 = tmp_6_fu_603_p3;

assign zext_ln25_fu_561_p1 = x_0_0_i1_reg_297;

assign zext_ln41_6_fu_513_p1 = tmp_s_fu_505_p3;

assign zext_ln41_7_fu_535_p1 = y_0_0_i_reg_286;

assign zext_ln41_8_fu_544_p1 = add_ln41_4_fu_539_p2;

assign zext_ln41_fu_501_p1 = tmp_fu_493_p3;

assign zext_ln700_1_fu_866_p1 = xor_ln168_3_fu_860_p2;

assign zext_ln700_fu_728_p1 = xor_ln168_1_fu_722_p2;

always @ (posedge ap_clk) begin
    add_ln41_reg_931[0] <= 1'b0;
    zext_ln25_reg_952[9:5] <= 5'b00000;
    zext_ln24_reg_957[9:5] <= 5'b00000;
    zext_ln168_reg_988[63:9] <= 55'b0000000000000000000000000000000000000000000000000000000;
    zext_ln166_reg_993[18:9] <= 10'b0000000000;
    zext_ln131_reg_1029[63:9] <= 55'b0000000000000000000000000000000000000000000000000000000;
    zext_ln168_2_reg_1047[63:4] <= 60'b000000000000000000000000000000000000000000000000000000000000;
    zext_ln166_1_reg_1052[12:4] <= 9'b000000000;
end

endmodule //bnn_xcel
